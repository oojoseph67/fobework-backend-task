var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.654,1,2.654]],["body/guards/AccessTokenGuard.html",[1,3.083,2,2.814,3,0.213,4,0.213,5,0.19,6,3.604,7,3.293,8,1.911,9,0.338,10,1.302,11,2.226,12,5.64,13,2.988,14,4.831,15,2.171,16,2.117,17,4.429,18,3.635,19,3.993,20,0.833,21,2.814,22,1.629,23,0.023,24,0.948,25,0.885,26,1.447,27,4.097,28,5.307,29,2.814,30,4.097,31,1.302,32,2.542,33,2.814,34,2.342,35,2.814,36,0.446,37,1.609,38,1.609,39,1.746,40,0.967,41,0.588,42,1.746,43,1.911,44,3.071,45,2.394,46,2.814,47,2.394,48,2.117,49,2.117,50,0.366,51,2.02,52,2.117,53,0.664,54,2.782,55,2.117,56,1.629,57,1.609,58,0.833,59,2.814,60,2.814,61,2.814,62,2.814,63,0.096,64,1.911,65,3.083,66,2.814,67,2.814,68,2.814,69,1.911,70,2.117,71,2.117,72,2.814,73,4.228,74,2.814,75,1.302,76,2.117,77,2.814,78,2.814,79,2.814,80,2.814,81,2.814,82,2.814,83,2.814,84,2.342,85,1.467,86,2.814,87,2.814,88,3.083,89,1.609,90,3.486,91,1.388,92,2.814,93,2.117,94,2.117,95,2.117,96,2.117,97,2.117,98,2.117,99,2.814,100,2.021,101,2.814,102,1.609,103,2.342,104,2.814,105,2.117,106,1.746,107,0.749,108,0.013,109,0.013]],["title/controllers/AppController.html",[110,1.343,111,2.395]],["body/controllers/AppController.html",[3,0.373,4,0.373,5,0.333,23,0.023,36,0.451,41,1.03,50,0.373,58,0.85,63,0.168,75,1.567,108,0.019,109,0.019,110,2.269,111,4.048,112,1.998,113,4.197,114,3.662,115,4.197,116,2.82,117,2.129,118,4.197,119,4.933]],["title/modules/AppModule.html",[120,1.343,121,2.395]],["body/modules/AppModule.html",[3,0.255,4,0.255,5,0.228,11,1.554,23,0.023,36,0.513,39,2.092,41,0.704,42,2.092,50,0.255,51,1.208,63,0.115,100,2.633,108,0.015,109,0.015,111,3.624,112,1.886,114,3.571,115,2.869,120,2.031,121,4.7,122,1.663,123,1.554,124,1.928,125,1.928,126,1.663,127,3.051,128,1.928,129,2.869,130,2.869,131,2.869,132,3.081,133,3.876,134,3.571,135,3.571,136,2.663,137,1.928,138,1.928,139,2.537,140,3.311,141,3.372,142,4.658,143,5.756,144,2.092,145,1.137,146,3.372,147,3.372,148,3.372,149,3.372,150,4.658,151,3.372,152,4.658,153,3.372,154,3.624,155,2.869,156,3.505,157,3.372,158,3.372,159,3.372,160,3.372,161,3.372,162,3.372,163,3.372,164,3.372,165,3.372,166,3.372,167,3.372,168,3.372]],["title/injectables/AppService.html",[40,0.833,114,2.016]],["body/injectables/AppService.html",[3,0.376,4,0.376,5,0.336,9,0.596,10,1.902,20,0.856,23,0.023,31,1.578,36,0.376,40,1.413,41,1.038,50,0.376,58,1.032,63,0.169,75,1.578,108,0.019,109,0.019,114,3.422,118,5.675,169,2.143,170,4.226,171,4.967,172,4.967,173,4.967]],["title/classes/Artist.html",[63,0.12,174,1.056]],["body/classes/Artist.html",[3,0.216,4,0.216,5,0.193,9,0.343,20,1.098,23,0.023,25,1.042,36,0.369,50,0.369,51,1.024,53,0.979,56,1.803,58,1.195,63,0.097,100,3.406,108,0.013,109,0.013,145,0.964,174,1.241,175,0.856,176,1.941,177,1.577,178,4.148,179,4.148,180,3.311,181,4.148,182,4.148,183,4.148,184,4.148,185,3.669,186,2.787,187,3.317,188,2.025,189,4.796,190,4.284,191,2.859,192,2.859,193,3.317,194,2.571,195,3.854,196,2.859,197,2.859,198,2.859,199,2.859,200,2.859,201,2.859,202,3.119,203,2.859,204,4.396,205,2.405,206,1.941,207,2.814,208,2.571,209,2.151,210,1.234,211,1.234,212,0.675,213,1.515,214,2.151,215,2.432,216,2.859,217,1.941,218,2.151,219,1.634,220,2.432]],["title/controllers/ArtistController.html",[110,1.343,221,2.395]],["body/controllers/ArtistController.html",[3,0.246,4,0.246,5,0.22,9,0.39,10,1.443,20,0.782,22,1.096,23,0.023,24,0.638,25,0.488,26,0.973,31,1.443,36,0.451,41,0.679,44,2.239,50,0.246,58,0.902,63,0.111,75,1.894,85,1.626,107,1.643,108,0.014,109,0.014,110,1.237,112,1.316,116,1.857,117,1.402,174,1.697,188,1.443,212,0.767,221,3.083,222,2.764,223,2.206,224,2.029,225,5.665,226,2.764,227,3.53,228,2.445,229,3.249,230,2.817,231,2.817,232,2.445,233,2.817,234,2.817,235,3.249,236,2.445,237,3.249,238,2.817,239,2.817,240,3.553,241,3.249,242,2.817,243,2.817,244,2.016,245,1.722,246,2.016,247,2.581,248,2.764,249,1.722,250,3.416,251,3.515,252,1.857,253,2.016,254,3.247,255,3.515,256,3.249,257,3.249,258,2.817,259,2.411,260,2.206,261,2.764,262,3.249,263,3.249,264,2.445,265,2.764,266,1.992,267,3.249,268,2.016,269,2.016,270,3.249,271,2.016,272,2.016,273,3.249]],["title/modules/ArtistModule.html",[120,1.343,132,1.74]],["body/modules/ArtistModule.html",[3,0.306,4,0.306,5,0.273,23,0.023,24,1.032,36,0.498,41,0.844,50,0.306,53,0.954,63,0.138,108,0.017,109,0.017,112,2.13,120,2.225,122,1.993,123,1.861,124,2.309,125,2.309,126,1.993,127,3.342,128,3.342,132,3.307,136,3.006,137,2.309,138,2.309,140,2.506,144,2.506,145,1.362,174,1.21,205,2.594,219,3.006,221,3.97,247,3.465,248,3.437,274,3.437,275,3.437,276,3.437,277,4.04,278,4.04,279,3.437,280,3.006,281,2.309,282,2.743,283,3.04,284,3.04]],["title/injectables/ArtistService.html",[40,0.833,247,1.74]],["body/injectables/ArtistService.html",[3,0.172,4,0.172,5,0.154,9,0.273,10,1.109,11,2.909,13,1.85,15,1.85,20,0.887,22,1.609,23,0.023,24,0.936,25,0.717,26,1.429,31,1.516,32,3.372,36,0.428,37,3.424,38,1.299,40,0.824,41,0.475,50,0.172,51,2.027,53,0.536,56,1.736,58,0.733,63,0.077,75,1.727,84,3.424,85,2.145,89,2.727,91,2.681,102,2.727,103,2.727,106,2.96,108,0.011,109,0.011,117,1.507,145,0.766,169,0.981,174,2.011,185,2.627,186,3.107,210,0.981,224,1.946,226,2.97,227,3.235,247,1.722,249,1.204,250,2.627,251,2.638,252,1.299,266,2.223,279,1.933,281,1.299,285,1.933,286,3.59,287,3.491,288,3.491,289,2.272,290,3.843,291,3.199,292,2.272,293,2.97,294,2.272,295,1.41,296,2.272,297,3.491,298,2.272,299,3.491,300,2.272,301,1.543,302,2.727,303,1.933,304,1.71,305,2.97,306,2.272,307,2.272,308,1.933,309,2.371,310,3.967,311,2.272,312,1.933,313,1.71,314,2.272,315,1.933,316,2.97,317,2.627,318,1.933,319,2.272,320,2.272,321,3.24,322,2.272,323,2.627,324,2.97,325,2.272,326,1.71,327,2.627,328,1.71,329,1.71,330,1.71]],["title/injectables/BcryptProvider.html",[40,0.833,331,2.016]],["body/injectables/BcryptProvider.html",[3,0.232,4,0.232,5,0.207,9,0.367,10,1.383,11,2.334,20,0.75,22,1.468,23,0.023,24,0.854,25,0.91,26,1.304,31,1.753,32,3.951,34,3.154,36,0.383,40,1.028,41,0.64,50,0.232,51,1.814,58,1.098,63,0.104,64,2.079,75,1.383,76,3.276,91,1.51,107,0.815,108,0.014,109,0.014,169,1.321,187,2.701,245,2.923,331,2.488,332,2.604,333,4.31,334,3.812,335,4.31,336,2.604,337,3.061,338,3.703,339,5.517,340,4.012,341,5.656,342,4.31,343,4.694,344,3.703,345,3.703,346,3.703,347,2.604,348,3.061,349,4.353,350,3.703,351,4.694,352,4.959,353,2.701,354,3.061,355,3.703,356,3.061,357,2.604,358,4.353,359,3.061,360,3.061,361,4.151,362,4.151,363,2.604,364,3.061]],["title/classes/Booking.html",[63,0.12,365,1.74]],["body/classes/Booking.html",[3,0.216,4,0.216,5,0.192,9,0.342,20,1.051,23,0.023,25,1.013,36,0.368,50,0.429,51,1.02,53,0.976,56,1.8,58,1.115,63,0.097,100,3.141,107,0.758,108,0.013,109,0.013,145,0.96,174,1.598,175,0.853,177,1.573,180,3.303,188,1.938,189,4.264,190,3.876,193,2.564,194,3.516,195,4.242,202,4.448,204,4.242,205,2.399,206,1.934,207,1.934,208,2.564,209,2.143,210,1.229,211,1.783,212,0.672,214,3.66,217,1.934,259,2.241,365,2.632,366,1.767,367,3.66,368,4.016,369,3.66,370,2.781,371,4.138,372,2.848,373,1.509,374,2.848,375,2.806,376,2.564,377,2.848,378,2.423,379,2.848,380,1.783,381,2.848,382,2.848,383,3.303,384,4.448,385,2.848,386,3.303,387,2.848,388,4.54,389,2.806,390,3.516,391,3.516,392,2.143,393,2.848,394,2.423,395,2.848,396,2.423,397,2.143,398,1.934,399,2.423]],["title/controllers/BookingController.html",[110,1.343,400,2.189]],["body/controllers/BookingController.html",[3,0.185,4,0.185,5,0.165,9,0.294,10,1.174,20,0.854,22,1.501,23,0.023,24,1.044,25,0.669,26,1.333,31,1.575,36,0.403,41,0.511,44,1.822,50,0.185,56,0.825,58,1.055,63,0.126,64,1.662,75,1.846,85,1.323,107,1.797,108,0.012,109,0.012,110,0.932,112,0.991,116,1.399,117,1.056,188,1.575,212,0.578,223,1.662,224,1.323,228,1.842,230,2.292,231,3.471,232,1.842,233,2.292,234,2.292,236,1.842,238,3.471,239,2.292,242,2.292,243,2.292,244,1.518,245,1.297,246,1.518,249,1.297,252,1.399,253,1.518,254,3.301,255,3.709,258,3.075,259,2.676,260,1.662,266,2.443,268,1.518,269,1.518,271,1.518,272,1.518,365,3.349,389,2.509,400,2.292,401,1.842,402,3.143,403,3.143,404,3.143,405,4.217,406,2.082,407,2.447,408,4.217,409,2.447,410,3.143,411,3.694,412,3.73,413,3.366,414,2.447,415,2.082,416,2.447,417,2.447,418,3.348,419,2.447,420,2.082,421,2.964,422,2.447,423,2.447,424,2.447,425,3.786,426,2.447,427,2.082,428,3.143,429,2.358,430,1.842,431,2.509,432,3.075,433,3.348,434,1.662,435,2.082,436,2.082,437,2.082,438,2.082,439,2.082,440,2.082,441,2.082,442,2.082,443,2.082,444,2.082,445,2.082,446,2.082,447,2.082,448,2.082,449,2.082]],["title/modules/BookingModule.html",[120,1.343,133,2.189]],["body/modules/BookingModule.html",[3,0.291,4,0.291,5,0.26,23,0.023,24,0.754,36,0.509,41,0.803,50,0.291,63,0.131,108,0.016,109,0.016,112,2.061,120,2.172,122,1.896,123,1.771,124,2.197,125,2.197,126,1.896,127,3.262,128,2.197,132,3.203,133,4.327,134,3.712,135,3.712,136,2.91,137,2.197,138,2.197,140,3.158,144,2.385,145,1.296,205,1.896,282,2.61,365,1.896,398,3.456,400,3.541,429,3.44,430,2.893,450,3.27,451,3.844,452,3.27,453,3.844,454,3.844,455,2.893,456,3.844,457,3.844,458,2.893,459,3.844]],["title/injectables/BookingService.html",[40,0.833,429,1.869]],["body/injectables/BookingService.html",[3,0.185,4,0.185,5,0.165,9,0.293,10,1.172,11,2.957,13,2.624,15,1.955,20,0.916,22,1.67,23,0.023,24,0.972,25,0.744,26,1.483,31,1.574,36,0.463,37,3.318,38,1.397,40,0.871,41,0.51,50,0.185,51,1.904,58,0.964,63,0.083,75,1.574,84,3.196,85,2.002,89,2.541,91,2.863,102,2.541,103,2.541,106,2.758,108,0.012,109,0.012,117,2.137,145,0.824,169,1.054,174,0.732,210,1.054,224,1.774,247,2.863,249,1.295,259,1.126,266,1.404,281,1.397,286,3.727,290,3.363,295,3.073,301,1.659,302,1.397,309,2.505,310,3.61,313,1.838,321,3.019,323,2.776,365,2.443,367,1.838,369,1.838,370,1.397,380,1.918,383,1.659,386,1.659,402,3.139,403,3.139,404,3.139,406,3.139,415,3.139,420,3.139,421,3.075,429,1.955,431,1.659,455,1.838,460,2.079,461,2.443,462,3.782,463,2.443,464,3.075,465,2.443,466,3.689,467,2.443,468,2.443,469,2.443,470,2.443,471,2.079,472,2.443,473,2.079,474,2.443,475,2.079,476,2.443,477,3.689,478,2.443,479,2.079,480,2.443,481,2.443,482,2.443,483,2.443,484,2.443,485,2.079,486,2.443,487,4.953,488,3.689,489,2.443,490,3.689,491,3.689,492,2.443,493,2.443,494,2.443]],["title/classes/CreateArtistDto.html",[63,0.12,227,2.016]],["body/classes/CreateArtistDto.html",[3,0.215,4,0.215,5,0.192,9,0.341,20,1.076,23,0.023,24,0.558,25,1.012,36,0.312,50,0.215,53,0.974,56,1.392,58,1.169,63,0.141,100,2.397,107,1.661,108,0.013,109,0.013,174,1.87,175,0.851,177,1.571,178,4.817,179,4.134,181,4.134,182,4.817,183,4.817,184,4.134,185,3.656,186,2.777,187,2.56,188,1.984,211,2.746,212,0.671,215,3.511,227,2.359,259,1.309,266,1.571,373,3.308,495,5.415,496,2.138,497,2.842,498,2.842,499,2.842,500,2.842,501,3.511,502,4.127,503,4.859,504,2.842,505,2.842,506,4.127,507,5.332,508,4.127,509,2.842,510,4.127,511,2.842,512,2.842,513,4.127,514,2.842,515,4.127,516,2.842,517,2.842,518,2.418,519,2.842,520,3.638,521,3.105,522,3.665,523,4.536,524,4.127,525,3.105,526,2.842,527,1.506,528,2.138,529,4.134,530,2.842,531,2.842,532,2.842]],["title/classes/CreateBookingDto.html",[63,0.12,421,1.869]],["body/classes/CreateBookingDto.html",[3,0.248,4,0.248,5,0.222,9,0.394,20,0.98,23,0.023,25,0.855,36,0.398,50,0.248,56,1.541,58,1.067,63,0.156,107,1.648,108,0.015,109,0.015,174,1.368,175,0.982,177,1.739,188,1.807,211,2.742,212,0.774,259,2.423,266,2.357,365,1.617,367,3.957,368,4.5,369,3.957,370,3.006,371,2.79,373,3.013,375,2.227,376,2.034,380,2.454,383,3.571,384,3.438,386,3.571,394,2.79,396,2.79,418,2.467,421,2.421,455,2.467,518,4.474,520,3.632,521,4.28,525,3.438,527,1.737,528,3.957,533,5.088,534,2.467,535,3.279,536,3.887,537,3.529,538,3.887,539,3.438,540,3.279,541,3.279,542,3.279,543,2.835,544,3.279,545,2.467,546,2.79,547,3.279,548,3.279]],["title/classes/CreateEventDto.html",[63,0.12,549,2.016]],["body/classes/CreateEventDto.html",[3,0.219,4,0.219,5,0.195,9,0.347,20,0.982,23,0.023,24,1.118,25,0.942,36,0.371,50,0.219,56,1.922,58,1.081,63,0.167,85,1.495,100,1.425,107,1.63,108,0.013,109,0.013,174,0.865,175,0.865,177,1.589,188,1.811,193,3.891,211,2.706,212,0.682,240,1.961,266,1.589,368,3.141,370,2.803,373,3.019,375,1.961,376,1.792,380,2.8,501,3.552,520,3.501,521,3.69,522,3.042,523,3.552,525,3.69,527,1.53,529,2.457,536,2.457,537,4.025,538,2.457,539,2.173,543,2.59,546,2.457,549,2.387,550,5.053,551,2.173,552,4.848,553,4.172,554,3.552,555,4.903,556,4.175,557,2.888,558,2.888,559,4.175,560,4.175,561,2.888,562,2.888,563,4.175,564,4.175,565,2.888,566,2.888,567,3.552,568,2.888,569,2.888,570,2.888,571,2.888,572,4.175,573,3.552,574,1.961,575,4.175,576,2.888,577,2.888,578,2.888,579,2.888,580,2.888]],["title/classes/CreateUserDto.html",[63,0.12,581,2.016]],["body/classes/CreateUserDto.html",[3,0.27,4,0.27,5,0.241,9,0.428,20,1.016,23,0.023,24,1.078,25,0.886,26,1.45,36,0.446,50,0.27,56,1.632,57,3.141,58,1.095,63,0.187,108,0.015,109,0.015,175,1.068,177,1.842,188,1.873,211,1.539,212,0.842,302,3.141,340,3.141,346,3.034,520,3.369,522,3.409,527,1.889,539,3.642,545,2.683,573,4.118,574,2.421,581,2.767,582,5.241,583,2.683,584,4.674,585,3.566,586,3.566,587,3.566,588,3.566,589,3.566,590,3.566,591,5.893,592,4.84,593,4.84,594,4.84,595,4.84,596,4.84,597,6.353,598,4.84,599,4.84,600,4.84,601,3.566,602,3.566,603,3.566,604,4.118,605,3.566,606,3.566,607,2.683,608,3.642,609,2.212,610,3.034,611,3.566,612,3.566,613,3.566,614,3.566]],["title/classes/Event.html",[63,0.12,380,1.522]],["body/classes/Event.html",[3,0.193,4,0.193,5,0.172,9,0.306,20,1.015,23,0.023,24,0.993,25,1.015,36,0.345,50,0.345,51,0.914,53,0.9,56,1.917,58,1.102,63,0.087,100,3.287,107,1.611,108,0.012,109,0.012,145,0.861,174,0.764,175,0.764,177,1.451,180,3.099,188,1.872,190,3.91,193,4.192,194,3.361,195,3.099,202,3.434,204,4.203,205,2.251,206,1.733,207,2.589,208,2.366,209,1.921,210,1.101,211,2.671,212,0.603,213,1.352,214,2.869,217,2.589,239,1.584,240,2.589,370,2.609,373,3.121,375,2.589,376,2.366,380,2.915,392,1.921,528,1.921,543,2.366,552,4.307,553,3.883,554,2.171,567,2.171,615,1.733,616,4.564,617,3.813,618,3.813,619,2.552,620,2.552,621,2.552,622,2.552,623,5.062,624,2.552,625,2.552,626,2.552,627,2.552,628,2.552,629,2.552,630,2.552,631,3.813,632,3.813,633,2.552,634,2.552,635,3.813,636,1.921,637,1.733,638,2.171]],["title/controllers/EventsController.html",[110,1.343,639,2.395]],["body/controllers/EventsController.html",[3,0.246,4,0.246,5,0.22,9,0.39,10,1.443,20,0.782,22,1.096,23,0.023,24,0.638,25,0.488,26,0.973,31,1.443,36,0.451,41,0.679,44,2.239,50,0.246,58,0.902,63,0.111,75,1.894,85,1.626,107,1.643,108,0.014,109,0.014,110,1.237,112,1.316,116,1.857,117,1.402,188,1.443,212,0.767,223,2.206,224,2.029,228,2.445,230,2.817,231,2.817,232,2.445,233,2.817,234,2.817,236,2.445,238,2.817,239,2.817,242,2.817,243,2.817,244,2.016,245,1.722,246,2.016,249,1.722,252,1.857,253,2.016,254,3.247,255,3.515,258,2.817,259,2.411,260,2.206,261,2.764,264,2.445,265,2.764,266,1.992,268,2.016,269,2.016,271,2.016,272,2.016,380,2.258,464,2.772,549,3.53,639,3.083,640,2.764,641,4.819,642,5.665,643,2.764,644,3.249,645,3.249,646,3.249,647,3.249,648,2.764,649,3.416,650,3.515,651,3.249,652,3.249,653,3.249,654,3.249,655,3.249,656,3.249,657,3.249]],["title/modules/EventsModule.html",[120,1.343,134,2.016]],["body/modules/EventsModule.html",[3,0.284,4,0.284,5,0.254,23,0.023,24,1.106,36,0.506,41,0.784,50,0.284,53,0.886,63,0.128,108,0.016,109,0.016,112,2.029,120,2.146,122,1.851,123,1.729,124,2.145,125,2.145,126,1.851,127,3.223,128,3.223,132,3.181,134,3.872,136,2.864,137,2.145,138,2.145,140,3.108,144,2.329,145,1.266,174,1.124,205,2.782,219,2.864,280,2.864,281,2.145,282,2.549,283,2.824,284,2.824,380,1.62,458,2.824,464,3.681,637,3.402,639,3.829,648,3.193,658,3.193,659,3.193,660,3.193,661,3.753,662,3.753,663,3.753,664,3.193,665,2.549,666,3.753]],["title/injectables/EventsService.html",[40,0.833,464,1.869]],["body/injectables/EventsService.html",[3,0.17,4,0.17,5,0.152,9,0.27,10,1.1,11,2.751,13,1.834,15,1.834,20,0.817,22,1.424,23,0.024,24,0.828,25,0.634,26,1.265,31,1.507,32,3.357,36,0.462,37,3.327,38,1.285,39,1.394,40,0.817,41,0.469,50,0.17,51,1.938,53,0.997,56,1.424,58,0.728,63,0.077,75,1.791,84,3.223,85,2.019,89,2.413,91,2.669,102,2.413,103,2.413,106,2.619,108,0.011,109,0.011,117,1.494,132,1.108,145,0.758,169,0.97,174,1.621,186,1.979,210,0.97,224,1.938,240,2.351,247,1.108,249,1.191,252,1.285,266,2.146,281,1.285,286,3.569,290,4.055,291,3.177,301,1.526,302,2.711,304,1.691,308,1.912,309,2.351,310,3.674,313,1.691,315,1.912,316,2.945,317,1.691,321,2.867,323,2.605,324,1.912,326,1.691,327,3.177,328,1.691,329,1.691,330,1.691,370,1.285,380,2.678,458,1.691,464,1.834,473,1.912,475,2.945,479,1.912,549,3.223,641,1.912,643,2.945,649,2.605,650,2.619,664,1.912,665,1.526,667,1.912,668,3.461,669,2.247,670,2.247,671,3.461,672,2.247,673,2.247,674,3.461,675,2.247,676,2.247,677,2.247,678,2.247,679,2.247,680,2.247,681,2.247,682,2.247,683,2.247,684,2.247,685,3.461,686,2.247,687,2.247,688,2.247]],["title/injectables/GenerateTokenProvider.html",[40,0.833,689,2.395]],["body/injectables/GenerateTokenProvider.html",[3,0.228,4,0.228,5,0.203,9,0.361,10,1.367,11,2.775,13,3.068,15,2.279,16,2.265,17,4.532,18,3.776,19,4.12,20,0.865,22,1.846,23,0.023,24,0.985,25,0.953,26,1.503,31,1.367,34,3.13,36,0.438,39,1.867,40,1.015,41,0.629,42,1.867,43,2.044,48,3.236,49,2.265,50,0.228,51,1.54,53,1.422,55,2.265,56,1.692,57,1.72,63,0.103,65,3.236,69,2.044,70,2.265,71,2.265,73,2.044,75,1.367,90,4.658,91,2.701,93,2.265,94,2.265,95,2.265,96,2.265,97,2.265,98,2.265,108,0.014,109,0.014,169,1.299,186,3.31,281,1.72,295,2.668,334,3.776,689,2.92,690,4.658,691,2.265,692,5.018,693,5.791,694,3.01,695,3.01,696,3.01,697,4.301,698,3.01,699,3.01,700,2.56,701,2.265,702,2.56,703,6.023,704,2.265,705,3.01,706,3.01,707,4.301,708,3.01,709,3.01,710,3.659,711,3.236,712,3.01,713,4.301,714,3.01,715,3.01,716,3.01,717,3.01,718,3.01]],["title/injectables/HashingProvider.html",[40,0.833,353,2.189]],["body/injectables/HashingProvider.html",[3,0.271,4,0.271,5,0.242,9,0.429,10,1.541,20,0.836,22,1.635,23,0.023,24,0.951,25,0.956,26,1.452,31,1.748,32,3.945,34,3.372,36,0.271,40,1.145,41,0.747,50,0.271,58,1.063,63,0.122,76,3.648,107,0.951,108,0.015,109,0.015,169,1.543,187,3.008,245,2.915,333,4.68,335,4.68,336,3.041,338,4.125,340,3.941,341,4.68,343,4.125,344,4.125,345,4.125,347,3.041,352,5.019,353,3.008,355,4.125,357,3.041,361,4.14,362,3.648,363,3.041,719,3.041,720,6.503,721,3.575,722,5.899,723,5.899,724,4.125,725,4.848,726,3.575,727,3.575,728,3.575]],["title/classes/LoginDto.html",[63,0.12,729,2.189]],["body/classes/LoginDto.html",[3,0.313,4,0.313,5,0.279,9,0.496,20,0.92,23,0.023,25,0.802,36,0.447,50,0.313,53,1.475,57,3.697,58,1.077,63,0.202,107,1.42,108,0.017,109,0.017,175,1.238,177,2.031,188,1.696,211,2.551,212,0.976,340,3.697,373,2.828,520,3.379,522,3.311,527,2.19,537,3.876,545,3.11,574,2.807,604,4.541,608,4.016,609,2.564,610,3.516,729,3.311,730,3.516,731,5.337,732,4.133,733,4.133,734,4.133,735,4.133,736,4.133,737,4.133]],["title/classes/RefreshTokenDto.html",[63,0.12,738,2.395]],["body/classes/RefreshTokenDto.html",[3,0.352,4,0.352,5,0.314,9,0.557,20,0.8,23,0.023,25,0.698,36,0.435,50,0.352,58,0.99,63,0.196,73,3.901,107,1.236,108,0.018,109,0.018,175,1.391,177,2.187,188,1.476,211,2.479,212,1.096,373,2.461,520,3.284,522,3.565,527,2.461,537,3.565,711,4.694,738,3.901,739,4.888,740,3.951,741,4.888,742,4.888,743,4.644,744,4.644,745,4.644]],["title/injectables/RefreshTokenProvider.html",[40,0.833,746,2.654]],["body/injectables/RefreshTokenProvider.html",[3,0.225,4,0.225,5,0.201,7,1.844,9,0.357,10,1.354,11,2.296,13,2.884,15,2.258,16,2.236,17,4.513,18,3.75,19,4.096,20,0.735,22,1.437,23,0.023,24,0.836,25,0.818,26,1.277,31,0.944,34,2.436,36,0.478,37,2.436,38,1.699,39,1.844,40,1.006,41,0.621,42,1.844,43,2.018,48,3.207,49,2.236,50,0.225,51,1.949,53,1.176,54,2.018,55,2.236,63,0.101,65,3.207,69,2.018,70,2.236,71,2.236,73,3.696,75,0.944,84,1.699,85,1.526,88,2.236,89,1.699,91,2.458,93,2.236,94,2.236,95,2.236,96,2.236,97,2.236,98,2.236,102,1.699,103,2.436,105,2.236,106,2.644,107,0.791,108,0.014,109,0.014,169,1.283,295,1.844,334,3.75,462,4.631,463,2.685,471,2.528,689,4.195,691,2.236,700,2.528,701,2.236,702,2.528,704,3.207,710,3.626,711,3.207,738,2.894,741,4.239,746,3.207,747,4.239,748,4.983,749,2.972,750,2.972,751,2.972,752,2.972,753,2.972,754,2.972,755,2.972,756,2.972,757,2.972,758,2.972,759,2.972,760,2.972,761,2.972,762,2.972,763,2.972,764,4.262,765,2.972,766,2.972,767,2.972,768,2.972,769,2.972]],["title/classes/ToNumberPipe.html",[63,0.12,434,2.395]],["body/classes/ToNumberPipe.html",[3,0.222,4,0.222,5,0.198,9,0.352,10,1.342,20,0.506,22,0.99,23,0.023,24,0.971,25,0.441,26,0.879,31,0.933,36,0.434,41,0.613,44,1.448,50,0.222,56,1.425,58,1.061,63,0.144,64,2.869,75,1.956,85,1.051,107,1.707,108,0.013,109,0.013,110,1.117,116,1.678,117,1.267,175,0.879,212,0.693,224,1.051,230,1.821,231,3.07,233,1.821,234,1.821,238,3.07,239,1.821,242,2.621,243,2.621,244,1.821,245,1.555,246,1.821,249,1.555,252,1.678,253,1.821,254,3.558,255,3.908,258,3.358,259,2.836,260,1.993,266,2.397,268,1.821,269,1.821,271,1.821,272,1.821,365,3.212,389,2.869,400,1.821,401,2.209,405,2.497,408,3.594,412,3.179,413,2.869,418,3.179,421,2.622,425,3.594,427,2.497,428,4.21,429,2.622,430,2.209,431,2.869,432,3.358,433,3.724,434,2.869,435,3.594,436,2.497,437,2.497,438,2.497,439,2.497,440,2.497,441,2.497,442,2.497,443,2.497,444,2.497,445,2.497,446,2.497,447,2.497,448,2.497,449,2.497,608,3.179,609,1.821,770,2.935]],["title/classes/UpdateArtistDto.html",[63,0.12,251,2.189]],["body/classes/UpdateArtistDto.html",[3,0.388,4,0.388,5,0.347,23,0.023,36,0.462,50,0.388,63,0.175,108,0.019,109,0.019,175,1.536,212,1.211,213,3.233,224,1.836,227,2.931,250,3.858,251,3.785,496,3.858,771,4.362,772,6.101,773,3.482]],["title/classes/UpdateBookingDto.html",[63,0.12,432,2.189]],["body/classes/UpdateBookingDto.html",[3,0.388,4,0.388,5,0.347,23,0.023,36,0.462,50,0.388,63,0.175,108,0.019,109,0.019,175,1.536,212,1.211,213,3.233,224,1.836,421,2.717,431,3.482,432,3.785,534,3.858,773,3.482,774,4.362,775,6.101]],["title/classes/UpdateEventDto.html",[63,0.12,650,2.189]],["body/classes/UpdateEventDto.html",[3,0.388,4,0.388,5,0.347,23,0.023,36,0.462,50,0.388,63,0.175,108,0.019,109,0.019,175,1.536,212,1.211,213,3.233,224,1.836,549,2.931,551,3.858,649,3.858,650,3.785,773,3.482,776,4.362,777,6.101]],["title/classes/UpdateUserDto.html",[63,0.12,778,2.189]],["body/classes/UpdateUserDto.html",[3,0.388,4,0.388,5,0.347,23,0.023,36,0.462,50,0.388,63,0.175,108,0.019,109,0.019,175,1.536,212,1.211,213,3.233,224,1.836,581,2.931,583,3.858,773,3.482,778,3.785,779,4.362,780,6.101,781,5.127]],["title/classes/User.html",[53,0.833,63,0.12]],["body/classes/User.html",[3,0.263,4,0.263,5,0.235,9,0.418,20,1.053,23,0.023,24,1.064,25,0.97,26,1.425,36,0.411,50,0.441,51,1.246,53,1.377,57,3.101,58,1.133,63,0.119,100,3.289,108,0.015,109,0.015,145,1.173,175,1.042,177,1.811,180,3.684,188,1.941,189,2.618,190,3.366,193,2.953,194,3.366,195,3.232,204,4.283,205,2.348,206,2.362,207,3.232,208,2.953,210,1.501,211,1.501,212,0.821,213,1.843,217,2.362,280,1.989,302,3.492,312,2.96,340,3.101,378,2.96,384,4.082,392,2.618,543,2.953,584,4.615,782,2.158,783,3.479,784,5.425,785,4.759,786,3.479,787,3.479,788,3.479,789,3.479,790,2.618,791,2.96]],["title/controllers/UsersController.html",[110,1.343,792,2.395]],["body/controllers/UsersController.html",[3,0.21,4,0.21,5,0.188,9,0.333,10,1.289,20,0.826,22,1.617,23,0.023,24,1.035,25,0.72,26,1.436,31,1.523,36,0.399,41,0.58,44,2.001,50,0.21,53,1.584,58,0.967,63,0.095,75,1.782,85,1.453,107,1.785,108,0.013,109,0.013,110,1.056,112,1.124,116,1.587,117,1.198,188,1.523,212,0.655,223,1.885,230,2.517,231,3.271,233,2.517,234,2.517,238,3.271,242,1.722,243,2.517,244,1.722,245,1.471,246,1.722,253,1.722,254,3.271,255,3.754,258,2.974,259,2.699,264,2.089,266,2.361,268,1.722,269,1.722,271,1.722,272,1.722,410,2.361,412,3.052,413,3.255,433,3.052,463,2.365,581,3.349,729,3.635,778,3.271,792,2.754,793,2.361,794,2.361,795,4.486,796,5.273,797,4.056,798,2.361,799,2.776,800,4.056,801,3.451,802,2.776,803,4.056,804,4.056,805,2.776,806,2.776,807,2.776,808,2.776,809,2.776,810,2.776,811,2.776,812,2.776,813,2.776,814,2.776,815,2.361,816,2.361,817,2.776,818,2.776,819,2.776,820,2.776,821,2.776,822,2.776,823,2.776,824,2.776,825,2.776,826,2.776,827,2.776,828,2.776,829,2.776]],["title/modules/UsersModule.html",[120,1.343,135,2.016]],["body/modules/UsersModule.html",[3,0.289,4,0.289,5,0.258,23,0.023,24,0.993,36,0.5,41,0.797,50,0.289,53,0.9,63,0.13,108,0.016,109,0.016,112,2.05,120,2.163,122,1.881,123,1.757,124,2.18,125,2.18,126,1.881,127,3.249,128,3.249,135,4.058,136,2.894,137,2.18,138,2.18,140,2.366,144,2.366,145,1.286,174,1.142,205,2.497,219,2.894,280,2.894,282,2.589,283,2.869,284,2.869,331,3.703,463,3.436,607,2.869,665,2.589,792,3.86,815,3.244,830,3.244,831,3.244,832,3.244,833,3.813,834,3.813,835,3.813]],["title/injectables/UsersService.html",[40,0.833,463,1.74]],["body/injectables/UsersService.html",[3,0.164,4,0.164,5,0.146,9,0.26,10,1.069,11,2.876,13,2.185,15,1.782,20,0.868,22,1.698,23,0.023,24,0.988,25,0.757,26,1.508,31,1.478,36,0.421,37,2.358,38,1.238,40,0.794,41,0.452,44,1.068,50,0.164,51,2.059,53,1.493,56,1.134,57,3.047,58,0.919,63,0.074,75,1.767,84,3.376,85,2.115,88,1.629,89,2.879,91,2.913,102,2.658,103,2.879,105,1.629,107,0.576,108,0.011,109,0.011,117,1.78,145,0.73,169,0.934,174,1.666,186,1.238,187,1.343,210,0.934,224,1.205,266,1.77,290,3.777,291,2.531,293,3.509,295,2.885,301,1.47,303,1.842,304,1.629,305,3.509,309,1.47,310,2.284,317,1.629,318,1.842,321,1.47,326,1.629,327,2.531,328,1.629,329,1.629,330,1.629,331,2.658,340,3.18,353,2.559,361,1.629,362,3.104,413,2.801,463,1.659,485,1.842,581,3.18,607,1.629,665,1.47,724,1.842,729,3.307,778,2.087,795,2.862,798,2.862,801,1.842,816,1.842,836,1.842,837,3.364,838,3.364,839,2.165,840,2.165,841,3.364,842,2.165,843,3.364,844,2.165,845,3.364,846,2.165,847,2.165,848,2.165,849,2.165,850,3.364,851,2.165,852,2.165,853,2.165,854,2.165,855,2.165,856,2.165,857,3.364,858,4.124,859,4.124,860,4.124,861,2.165,862,2.165,863,2.165,864,2.165,865,2.165,866,3.364,867,2.165]],["title/coverage.html",[868,3.615]],["body/coverage.html",[0,2.007,1,2.007,5,0.18,6,3.18,7,2.906,8,3.18,23,0.023,25,0.868,40,1.478,52,2.007,53,0.63,54,1.811,63,0.229,85,0.955,108,0.013,109,0.013,110,2.1,111,1.811,113,2.269,114,1.524,126,1.315,139,2.007,154,1.811,170,2.269,174,0.799,176,3.18,218,2.007,219,1.524,221,1.811,222,2.269,227,1.524,247,1.315,251,1.655,280,1.524,285,2.269,331,1.524,332,2.269,353,1.655,365,1.315,366,2.906,376,4.464,380,1.151,397,2.007,398,1.811,400,1.655,401,2.964,421,1.413,429,1.413,432,1.655,434,1.811,460,2.269,463,1.315,464,1.413,495,2.269,496,2.964,533,2.269,534,2.964,549,1.524,550,2.269,551,2.964,581,1.524,582,2.269,583,2.964,615,3.18,636,2.007,637,1.811,639,1.811,640,2.269,650,1.655,667,2.269,689,1.811,690,2.269,691,2.964,719,2.269,729,1.655,730,2.269,738,1.811,739,2.269,740,2.269,746,2.007,747,2.269,771,2.269,774,2.269,776,2.269,778,1.655,779,2.269,782,2.906,790,2.007,792,1.811,793,2.269,836,2.269,868,2.007,869,2.269,870,2.667,871,2.667,872,6.801,873,5.775,874,4.683,875,5.172,876,5.518,877,2.667,878,2.667,879,5.518,880,3.939,881,2.667,882,2.667,883,2.667,884,2.667,885,2.667,886,2.667,887,5.172,888,3.939,889,2.269,890,2.667,891,2.667,892,2.667]],["title/dependencies.html",[123,1.954,893,2.51]],["body/dependencies.html",[23,0.023,41,0.946,42,2.808,43,3.074,45,3.851,47,3.851,63,0.193,108,0.018,109,0.018,123,2.086,145,1.526,210,1.953,212,1.069,351,3.851,527,2.398,574,3.074,894,4.526,895,4.526,896,6.166,897,4.526,898,4.526,899,5.654,900,4.526,901,4.526,902,4.526,903,4.526,904,4.526,905,4.526,906,4.526,907,4.526,908,4.526,909,4.526,910,4.526,911,4.526,912,4.526,913,4.526,914,4.526,915,4.526,916,4.526,917,4.526,918,4.526,919,4.526,920,4.526]],["title/miscellaneous/enumerations.html",[921,1.455,922,3.607]],["body/miscellaneous/enumerations.html",[9,0.582,23,0.023,53,1.393,108,0.019,109,0.019,302,3.372,366,3.008,383,4.006,386,4.006,388,5.629,389,4.006,390,5.019,391,5.019,543,3.66,609,4.33,782,3.008,921,2.392,922,4.125,923,4.439,924,3.649]],["title/miscellaneous/functions.html",[921,1.455,925,3.607]],["body/miscellaneous/functions.html",[9,0.658,23,0.02,108,0.02,109,0.02,126,3.303,889,4.664,921,2.704,925,4.664,926,5.482]],["title/index.html",[9,0.354,927,2.95,928,2.95]],["body/index.html",[23,0.022,44,1.451,69,2.873,108,0.014,109,0.014,120,1.886,123,1.355,154,2.873,156,4.077,188,0.935,190,1.825,210,1.269,224,1.053,350,3.599,537,3.708,701,3.728,704,3.183,742,4.215,794,3.599,868,2.213,869,4.883,929,4.23,930,5.418,931,4.23,932,4.23,933,2.941,934,6.158,935,5.418,936,2.941,937,4.954,938,2.941,939,4.23,940,2.941,941,6.776,942,2.941,943,4.23,944,2.941,945,2.941,946,2.941,947,4.23,948,4.23,949,5.418,950,2.941,951,4.23,952,2.941,953,2.941,954,3.183,955,4.23,956,2.941,957,2.941,958,5.418,959,2.941,960,2.941,961,2.941,962,2.941,963,2.941,964,2.941,965,5.418,966,2.941,967,4.954,968,2.941,969,4.954,970,2.941,971,4.954,972,2.941,973,2.941,974,2.941,975,2.941,976,2.941,977,2.941,978,2.941,979,4.23,980,2.941,981,2.941,982,2.941,983,4.23,984,4.23,985,2.941,986,4.23,987,2.941,988,4.23,989,2.941,990,2.941,991,4.23,992,2.941,993,4.23,994,2.941,995,2.941,996,2.941,997,2.941,998,4.23,999,2.941,1000,2.941,1001,2.941,1002,4.23,1003,2.941,1004,2.941,1005,2.941,1006,2.941,1007,2.941,1008,2.941,1009,2.941,1010,2.941,1011,4.23,1012,2.941,1013,2.941,1014,2.941,1015,2.941,1016,2.941,1017,2.941,1018,2.941,1019,2.941,1020,2.941,1021,5.418,1022,4.23,1023,2.941,1024,2.941,1025,4.23,1026,4.23,1027,2.941,1028,2.941,1029,2.941,1030,2.941,1031,4.23,1032,2.941,1033,2.941,1034,2.941,1035,3.599,1036,2.941,1037,2.941,1038,2.502]],["title/modules.html",[122,2.37]],["body/modules.html",[23,0.019,108,0.019,109,0.019,121,3.482,122,2.529,132,2.529,133,3.181,134,2.931,135,2.931,1039,6.885,1040,6.885,1041,6.885,1042,6.885]],["title/overview.html",[1043,4.087]],["body/overview.html",[0,2.752,23,0.023,108,0.016,109,0.016,112,1.481,114,3.182,120,1.392,121,4.699,122,1.804,123,1.685,124,2.09,125,2.09,126,1.804,127,2.09,128,2.09,129,3.111,130,3.111,131,3.111,132,3.28,133,4.262,134,3.852,135,4.002,136,2.814,137,2.09,138,2.09,169,1.578,175,1.095,247,3.227,274,3.111,275,3.111,276,3.111,331,3.182,429,2.949,450,3.111,452,3.111,463,3.227,464,3.466,658,3.111,659,3.111,660,3.111,830,3.111,831,3.111,832,3.111,1043,3.111,1044,4.923,1045,3.657,1046,3.657,1047,3.657]],["title/properties.html",[177,1.614,893,2.51]],["body/properties.html",[23,0.023,107,1.442,108,0.02,109,0.02,177,2.063,342,4.611,1035,4.611,1038,4.611,1048,5.419,1049,5.419]],["title/miscellaneous/typealiases.html",[921,1.455,1050,4.24]],["body/miscellaneous/typealiases.html",[6,3.397,7,3.103,8,4.082,9,0.6,23,0.019,25,0.903,34,2.859,54,4.082,108,0.019,109,0.019,176,3.397,208,4.148,218,4.523,366,3.103,397,4.523,615,3.397,636,4.523,782,3.103,790,4.523,921,2.467,923,3.764,924,3.764,1051,5.002,1052,4.255,1053,4.255,1054,4.255]],["title/miscellaneous/variables.html",[921,1.455,954,3.19]],["body/miscellaneous/variables.html",[6,3.113,7,2.844,8,3.87,9,0.55,23,0.023,25,0.689,52,4.289,53,1.082,58,0.79,108,0.018,109,0.018,139,3.45,154,3.87,155,3.9,156,3.45,176,3.113,194,4.22,219,3.258,220,3.9,280,3.258,366,2.844,398,3.87,399,3.9,609,4.22,615,3.113,637,3.87,638,3.9,782,2.844,791,3.9,921,2.261,923,3.45,924,3.45,954,3.45,1052,3.9,1053,3.9,1054,3.9,1055,4.584]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":376,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1048,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["01t18:00:00.000z",{"_index":577,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["01t18:00:00.000z'})@isnotempty()@type(undefined)@isdate",{"_index":557,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["07",{"_index":556,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["0})@isnotempty()@isnumber()@min(0",{"_index":540,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["1",{"_index":1047,"title":{},"body":{"overview.html":{}}}],["1.1.26",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["11.0.12",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["11.0.4",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1046,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":940,"title":{},"body":{"index.html":{}}}],["2.0.6",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":238,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":230,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":555,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["2024'})@isnotempty()@isstring",{"_index":565,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["25",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["4.0.2",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":233,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":412,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["5",{"_index":1044,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["5000",{"_index":538,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["507f1f77bcf86cd799439011",{"_index":575,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["507f1f77bcf86cd799439011'})@isnotempty()@ismongoid",{"_index":570,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["507f1f77bcf86cd799439012",{"_index":580,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["66",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":942,"title":{},"body":{"index.html":{}}}],["8.13.1",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1045,"title":{},"body":{"overview.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":720,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":766,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["accesstoken",{"_index":710,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["action",{"_index":327,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":1029,"title":{},"body":{"index.html":{}}}],["address",{"_index":731,"title":{},"body":{"classes/LoginDto.html":{}}}],["against",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["alias",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1051,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":318,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1030,"title":{},"body":{"index.html":{}}}],["api",{"_index":971,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":254,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":433,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":211,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{}}}],["apiproperty({description",{"_index":373,"title":{},"body":{"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apiresponse",{"_index":255,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":253,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["apitags('artists",{"_index":256,"title":{},"body":{"controllers/ArtistController.html":{}}}],["apitags('bookings",{"_index":437,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["apitags('events",{"_index":651,"title":{},"body":{"controllers/EventsController.html":{}}}],["apitags('users",{"_index":817,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":111,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":934,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":121,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":114,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":578,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["arrayminsize",{"_index":526,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["arrayminsize(1",{"_index":530,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist",{"_index":174,"title":{"classes/Artist.html":{}},"body":{"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["artist'})@apiresponse({status",{"_index":229,"title":{},"body":{"controllers/ArtistController.html":{}}}],["artist.controller",{"_index":278,"title":{},"body":{"modules/ArtistModule.html":{}}}],["artist.dto",{"_index":250,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/UpdateArtistDto.html":{}}}],["artist.dto.ts",{"_index":496,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["artist.dto.ts:16",{"_index":519,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:21",{"_index":517,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:28",{"_index":505,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:33",{"_index":500,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:38",{"_index":498,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:43",{"_index":512,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:49",{"_index":514,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.dto.ts:55",{"_index":509,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["artist.name",{"_index":283,"title":{},"body":{"modules/ArtistModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["artist.save",{"_index":320,"title":{},"body":{"injectables/ArtistService.html":{}}}],["artist.service",{"_index":248,"title":{},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{}}}],["artist/artist.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["artistcontroller",{"_index":221,"title":{"controllers/ArtistController.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"coverage.html":{}}}],["artistdocument",{"_index":218,"title":{},"body":{"classes/Artist.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["artistid",{"_index":367,"title":{},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{}}}],["artistmodel",{"_index":293,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UsersService.html":{}}}],["artistmodule",{"_index":132,"title":{"modules/ArtistModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules.html":{},"overview.html":{}}}],["artists",{"_index":240,"title":{},"body":{"controllers/ArtistController.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"injectables/EventsService.html":{}}}],["artists'})@apiresponse({status",{"_index":237,"title":{},"body":{"controllers/ArtistController.html":{}}}],["artistschema",{"_index":219,"title":{},"body":{"classes/Artist.html":{},"modules/ArtistModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["artistservice",{"_index":247,"title":{"injectables/ArtistService.html":{}},"body":{"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["atlas",{"_index":944,"title":{},"body":{"index.html":{}}}],["aud",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["audience",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["auth",{"_index":1001,"title":{},"body":{"index.html":{}}}],["auth/providers/bcrypt.provider",{"_index":835,"title":{},"body":{"modules/UsersModule.html":{}}}],["authenticated",{"_index":706,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["authentication",{"_index":742,"title":{},"body":{"classes/RefreshTokenDto.html":{},"index.html":{}}}],["author",{"_index":1049,"title":{},"body":{"properties.html":{}}}],["availability",{"_index":178,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["available",{"_index":967,"title":{},"body":{"index.html":{}}}],["await",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":1024,"title":{},"body":{"index.html":{}}}],["backend",{"_index":930,"title":{},"body":{"index.html":{}}}],["bad",{"_index":234,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["based",{"_index":933,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":351,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":364,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":331,"title":{"injectables/BcryptProvider.html":{}},"body":{"injectables/BcryptProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["bio",{"_index":179,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["biography",{"_index":531,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["biography'})@isnotempty()@isstring",{"_index":499,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["body",{"_index":243,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["booking",{"_index":365,"title":{"classes/Booking.html":{}},"body":{"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"classes/ToNumberPipe.html":{},"coverage.html":{}}}],["booking'})@apiparam({name",{"_index":409,"title":{},"body":{"controllers/BookingController.html":{}}}],["booking'})@apiresponse({status",{"_index":422,"title":{},"body":{"controllers/BookingController.html":{}}}],["booking.controller",{"_index":454,"title":{},"body":{"modules/BookingModule.html":{}}}],["booking.dto",{"_index":431,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateBookingDto.html":{}}}],["booking.dto.ts",{"_index":534,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["booking.dto.ts:12",{"_index":535,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:17",{"_index":542,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:22",{"_index":544,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.dto.ts:32",{"_index":541,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["booking.name",{"_index":459,"title":{},"body":{"modules/BookingModule.html":{}}}],["booking.service",{"_index":430,"title":{},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"classes/ToNumberPipe.html":{}}}],["booking/booking.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["bookingcontroller",{"_index":400,"title":{"controllers/BookingController.html":{}},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"classes/ToNumberPipe.html":{},"coverage.html":{}}}],["bookingdocument",{"_index":397,"title":{},"body":{"classes/Booking.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bookingmodel",{"_index":466,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingmodule",{"_index":133,"title":{"modules/BookingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules.html":{},"overview.html":{}}}],["bookingpaymentenum",{"_index":383,"title":{},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["bookingpaymentenum.paid",{"_index":493,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingpaymentenum.pending",{"_index":396,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{}}}],["bookings",{"_index":425,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["bookings'})@apiresponse({status",{"_index":424,"title":{},"body":{"controllers/BookingController.html":{}}}],["bookingschema",{"_index":398,"title":{},"body":{"classes/Booking.html":{},"modules/BookingModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bookingservice",{"_index":429,"title":{"injectables/BookingService.html":{}},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/ToNumberPipe.html":{},"coverage.html":{},"overview.html":{}}}],["bookingstatusenum",{"_index":386,"title":{},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"miscellaneous/enumerations.html":{}}}],["bookingstatusenum.confirmed",{"_index":490,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingstatusenum.pending",{"_index":394,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{}}}],["boolean",{"_index":187,"title":{},"body":{"classes/Artist.html":{},"injectables/BcryptProvider.html":{},"classes/CreateArtistDto.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branch",{"_index":1022,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1042,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1039,"title":{},"body":{"modules.html":{}}}],["budget",{"_index":368,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["budget'})@prop({type",{"_index":374,"title":{},"body":{"classes/Booking.html":{}}}],["buffer",{"_index":352,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":969,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["cancelled",{"_index":390,"title":{},"body":{"classes/Booking.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":314,"title":{},"body":{"injectables/ArtistService.html":{}}}],["catch",{"_index":102,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":105,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["cd",{"_index":950,"title":{},"body":{"index.html":{}}}],["central",{"_index":559,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["changes",{"_index":1027,"title":{},"body":{"index.html":{}}}],["character",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":485,"title":{},"body":{"injectables/BookingService.html":{},"injectables/UsersService.html":{}}}],["checkout",{"_index":1023,"title":{},"body":{"index.html":{}}}],["checkuser",{"_index":764,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["class",{"_index":63,"title":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":175,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clone",{"_index":947,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_artistmodule",{"_index":274,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_artistmodule_exports",{"_index":276,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_artistmodule_providers",{"_index":275,"title":{},"body":{"modules/ArtistModule.html":{},"overview.html":{}}}],["cluster_bookingmodule",{"_index":450,"title":{},"body":{"modules/BookingModule.html":{},"overview.html":{}}}],["cluster_bookingmodule_imports",{"_index":451,"title":{},"body":{"modules/BookingModule.html":{}}}],["cluster_bookingmodule_providers",{"_index":452,"title":{},"body":{"modules/BookingModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":658,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":660,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_imports",{"_index":661,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_eventsmodule_providers",{"_index":659,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":830,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":832,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":831,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":994,"title":{},"body":{"index.html":{}}}],["codebase",{"_index":992,"title":{},"body":{"index.html":{}}}],["commit",{"_index":1026,"title":{},"body":{"index.html":{}}}],["common",{"_index":1002,"title":{},"body":{"index.html":{}}}],["compare",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["comparepasswords",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(undefined",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compares",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":727,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc",{"_index":997,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1004,"title":{},"body":{"index.html":{}}}],["config/database.config",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environmentvalidation",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mongodb_uri",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["configuration",{"_index":1005,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":408,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["confirmbooking",{"_index":402,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["confirmbooking(@param('id",{"_index":442,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["confirmbooking(id",{"_index":406,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["confirmbookingpayment",{"_index":403,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["confirmbookingpayment(@param('id",{"_index":445,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["confirmbookingpayment(id",{"_index":415,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["confirmed",{"_index":389,"title":{},"body":{"classes/Booking.html":{},"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"miscellaneous/enumerations.html":{}}}],["confirmed'})@apiresponse({status",{"_index":411,"title":{},"body":{"controllers/BookingController.html":{}}}],["console.log('inside",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/Event.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(artistmodel",{"_index":289,"title":{},"body":{"injectables/ArtistService.html":{}}}],["constructor(bookingmodel",{"_index":461,"title":{},"body":{"injectables/BookingService.html":{}}}],["constructor(eventmodel",{"_index":669,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["constructor(private",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["constructor(usermodel",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["contributing",{"_index":1019,"title":{},"body":{"index.html":{}}}],["controller",{"_index":110,"title":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('artist",{"_index":257,"title":{},"body":{"controllers/ArtistController.html":{}}}],["controller('booking",{"_index":438,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["controller('events",{"_index":652,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('users",{"_index":818,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copy",{"_index":955,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":868,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":224,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(@body",{"_index":261,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/EventsController.html":{}}}],["create(createartistdto",{"_index":226,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{}}}],["create(createeventdto",{"_index":643,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["create(createuserdto",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["createartistdto",{"_index":227,"title":{"classes/CreateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["createbooking",{"_index":404,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["createbooking(@body",{"_index":439,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["createbooking(createbookingdto",{"_index":420,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["createbookingdto",{"_index":421,"title":{"classes/CreateBookingDto.html":{}},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["created",{"_index":260,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{}}}],["created'})@apiresponse({status",{"_index":232,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{}}}],["createdat",{"_index":180,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["createeventdto",{"_index":549,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["createtoken",{"_index":692,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createtoken(undefined",{"_index":695,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["createuserdto",{"_index":581,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creation",{"_index":617,"title":{},"body":{"classes/Event.html":{}}}],["credentials",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":1012,"title":{},"body":{"index.html":{}}}],["databaseconfig",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":193,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["date.now",{"_index":217,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["declarations",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":188,"title":{},"body":{"classes/Artist.html":{},"controllers/ArtistController.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["default",{"_index":194,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":246,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":271,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":123,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":700,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["description",{"_index":107,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["development",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["doc",{"_index":996,"title":{},"body":{"index.html":{}}}],["document",{"_index":207,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["documentation",{"_index":869,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":308,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{}}}],["doesnt",{"_index":323,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["dto",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":249,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/ToNumberPipe.html":{}}}],["dto/refresh",{"_index":756,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["dto/update",{"_index":252,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/ToNumberPipe.html":{}}}],["each",{"_index":529,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{}}}],["eight",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokenProvider.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":988,"title":{},"body":{"index.html":{}}}],["entities/artist.entity",{"_index":279,"title":{},"body":{"modules/ArtistModule.html":{},"injectables/ArtistService.html":{}}}],["entities/booking.entity",{"_index":455,"title":{},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{}}}],["entities/event.entity",{"_index":664,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/user.entity",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entry",{"_index":1007,"title":{},"body":{"index.html":{}}}],["enum",{"_index":384,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":922,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.${env}.local",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development.local",{"_index":956,"title":{},"body":{"index.html":{}}}],["env.production",{"_index":957,"title":{},"body":{"index.html":{}}}],["envfilepath",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":701,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"index.html":{}}}],["environmentvalidation",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":103,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["error.message",{"_index":106,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["event",{"_index":380,"title":{"classes/Event.html":{}},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["event'})@apiresponse({status",{"_index":644,"title":{},"body":{"controllers/EventsController.html":{}}}],["event'})@isnotempty()@isnumber",{"_index":568,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto",{"_index":649,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto.ts",{"_index":551,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:21",{"_index":571,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:29",{"_index":566,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:37",{"_index":562,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:46",{"_index":558,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:51",{"_index":569,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.name",{"_index":666,"title":{},"body":{"modules/EventsModule.html":{}}}],["eventdocument",{"_index":636,"title":{},"body":{"classes/Event.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["eventid",{"_index":369,"title":{},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{}}}],["eventmodel",{"_index":671,"title":{},"body":{"injectables/EventsService.html":{}}}],["events",{"_index":641,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["events'})@apiresponse({status",{"_index":646,"title":{},"body":{"controllers/EventsController.html":{}}}],["events.controller",{"_index":663,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.service",{"_index":648,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/events.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["eventschema",{"_index":637,"title":{},"body":{"classes/Event.html":{},"modules/EventsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventscontroller",{"_index":639,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":134,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":464,"title":{"injectables/EventsService.html":{}},"body":{"injectables/BookingService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["example",{"_index":537,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"index.html":{}}}],["execution",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["exist",{"_index":324,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{}}}],["existingartist",{"_index":316,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{}}}],["existingbooking",{"_index":487,"title":{},"body":{"injectables/BookingService.html":{}}}],["existingbooking.paymentstatus",{"_index":492,"title":{},"body":{"injectables/BookingService.html":{}}}],["existingbooking.save",{"_index":491,"title":{},"body":{"injectables/BookingService.html":{}}}],["existingbooking.status",{"_index":489,"title":{},"body":{"injectables/BookingService.html":{}}}],["existingorganizer",{"_index":475,"title":{},"body":{"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["existingorganizer.role",{"_index":680,"title":{},"body":{"injectables/EventsService.html":{}}}],["existingorganizer.user.role",{"_index":478,"title":{},"body":{"injectables/BookingService.html":{}}}],["existinguser",{"_index":305,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UsersService.html":{}}}],["existinguser.password",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.role",{"_index":311,"title":{},"body":{"injectables/ArtistService.html":{}}}],["exists",{"_index":309,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["expiresin",{"_index":703,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":213,"title":{},"body":{"classes/Artist.html":{},"classes/Event.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["extract",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(undefined",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":745,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isstring()@isnotempty",{"_index":743,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["failed",{"_index":321,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["feature",{"_index":1021,"title":{},"body":{"index.html":{}}}],["feature/amazing",{"_index":1025,"title":{},"body":{"index.html":{}}}],["festival",{"_index":564,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["fetch",{"_index":763,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":286,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["findartistbyid",{"_index":287,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findartistbyid(id",{"_index":297,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findartistbyuserid",{"_index":288,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findartistbyuserid(id",{"_index":299,"title":{},"body":{"injectables/ArtistService.html":{}}}],["findbyid",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["findeventbyid",{"_index":668,"title":{},"body":{"injectables/EventsService.html":{}}}],["findeventbyid(id",{"_index":674,"title":{},"body":{"injectables/EventsService.html":{}}}],["findone(@param('id",{"_index":265,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/EventsController.html":{}}}],["findone(id",{"_index":688,"title":{},"body":{"injectables/EventsService.html":{}}}],["finduserbyemail",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["fobework",{"_index":929,"title":{},"body":{"index.html":{}}}],["fork",{"_index":1020,"title":{},"body":{"index.html":{}}}],["format",{"_index":993,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":752,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["found",{"_index":413,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":1011,"title":{},"body":{"index.html":{}}}],["function",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":925,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":704,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"index.html":{}}}],["generatetokenprovider",{"_index":689,"title":{"injectables/GenerateTokenProvider.html":{}},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["generatetokens",{"_index":693,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["generatetokens(undefined",{"_index":698,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["genre",{"_index":181,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["genres",{"_index":502,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["get(':id",{"_index":264,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":236,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{}}}],["getallartists",{"_index":225,"title":{},"body":{"controllers/ArtistController.html":{}}}],["getallbookings",{"_index":405,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["getevents",{"_index":642,"title":{},"body":{"controllers/EventsController.html":{}}}],["gethello",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrefreshtoken",{"_index":748,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getrefreshtoken(undefined",{"_index":750,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["getting",{"_index":927,"title":{"index.html":{}},"body":{}}],["git",{"_index":949,"title":{},"body":{"index.html":{}}}],["given",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["guards/access",{"_index":754,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["hashed",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashedpassword",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["hashes",{"_index":349,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing",{"_index":356,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashing.provider",{"_index":354,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":353,"title":{"injectables/HashingProvider.html":{}},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["hashpassword",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(undefined",{"_index":347,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":172,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hot",{"_index":980,"title":{},"body":{"index.html":{}}}],["http://localhost:7231",{"_index":968,"title":{},"body":{"index.html":{}}}],["http://localhost:8111/api",{"_index":974,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["httpexception('invalid",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception('no",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["httpexception('user",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(`${error.message",{"_index":104,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["httpexception(`user",{"_index":307,"title":{},"body":{"injectables/ArtistService.html":{}}}],["https://fobework",{"_index":975,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_gateway",{"_index":315,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{}}}],["httpstatus.bad_request",{"_index":310,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":480,"title":{},"body":{"injectables/BookingService.html":{}}}],["httpstatus.not_found",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.unauthorized",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["hydrateddocument",{"_index":208,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["iat",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["id",{"_index":266,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["id'})@apiresponse({status",{"_index":410,"title":{},"body":{"controllers/BookingController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":579,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["implements",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apiresponse({status",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":344,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["inject(forwardref",{"_index":758,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["inject(jwtconfig.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["injectmodel",{"_index":301,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(artist.name",{"_index":303,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(booking.name",{"_index":474,"title":{},"body":{"injectables/BookingService.html":{}}}],["injectmodel(event.name",{"_index":676,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectmodel(user.name",{"_index":304,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":951,"title":{},"body":{"index.html":{}}}],["installation",{"_index":946,"title":{},"body":{"index.html":{}}}],["instance",{"_index":945,"title":{},"body":{"index.html":{}}}],["integration",{"_index":936,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":769,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["isarray",{"_index":523,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{}}}],["isboolean",{"_index":524,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["isdate",{"_index":572,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isemail",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":545,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isenum(bookingpaymentenum",{"_index":548,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["isenum(bookingstatusenum",{"_index":547,"title":{},"body":{"classes/CreateBookingDto.html":{}}}],["isenum(userrole",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":521,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["isnotempty",{"_index":520,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isnotempty()@isemail",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@transform",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":525,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["isoptional",{"_index":573,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{}}}],["isoptional()@isenum(userrole",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isorganizer",{"_index":477,"title":{},"body":{"injectables/BookingService.html":{}}}],["ispasswordcorrect",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{}}}],["iss",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["isstring",{"_index":522,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["issuer",{"_index":97,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jest",{"_index":1017,"title":{},"body":{"index.html":{}}}],["joi",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"index.html":{}}}],["jwt(refresh",{"_index":705,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["jwt_access_token_time_to_live=3600",{"_index":963,"title":{},"body":{"index.html":{}}}],["jwt_refresh_token_time_to_live=604800running",{"_index":964,"title":{},"body":{"index.html":{}}}],["jwt_secret=your_jwt_secret",{"_index":960,"title":{},"body":{"index.html":{}}}],["jwt_token_audience=your_token_audience",{"_index":961,"title":{},"body":{"index.html":{}}}],["jwt_token_issuer=your_token_issuer",{"_index":962,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["language",{"_index":1016,"title":{},"body":{"index.html":{}}}],["last",{"_index":631,"title":{},"body":{"classes/Event.html":{}}}],["legend",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1035,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1036,"title":{},"body":{"index.html":{}}}],["links",{"_index":507,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["lint",{"_index":991,"title":{},"body":{"index.html":{}}}],["list",{"_index":239,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{}}}],["literal",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":943,"title":{},"body":{"index.html":{}}}],["location",{"_index":552,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{}}}],["location'})@prop({type",{"_index":622,"title":{},"body":{"classes/Event.html":{}}}],["logged",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":824,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(logindto",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logindto",{"_index":729,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["m",{"_index":1028,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":1006,"title":{},"body":{"index.html":{}}}],["match",{"_index":725,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["matches",{"_index":346,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":109,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["media",{"_index":182,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["message",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":375,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{}}}],["min(0",{"_index":546,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["minimum",{"_index":539,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":921,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":965,"title":{},"body":{"index.html":{}}}],["model",{"_index":290,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":120,"title":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":122,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":935,"title":{},"body":{"index.html":{}}}],["mongodb_uri=your_mongodb_connection_string",{"_index":959,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":210,"title":{},"body":{"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/Event.html":{},"injectables/EventsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["mongoosemodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":282,"title":{},"body":{"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseschema",{"_index":209,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{}}}],["mongooseschema.types.objectid",{"_index":214,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{}}}],["music",{"_index":501,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@isnotempty()@isstring",{"_index":516,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["name'})@prop({type",{"_index":625,"title":{},"body":{"classes/Event.html":{}}}],["necessary",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["nestjs",{"_index":932,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"classes/Artist.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"classes/Booking.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/Event.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":212,"title":{},"body":{"classes/Artist.html":{},"controllers/ArtistController.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":939,"title":{},"body":{"index.html":{}}}],["number",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/ToNumberPipe.html":{},"injectables/UsersService.html":{}}}],["number(value",{"_index":436,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["numberoftickets",{"_index":553,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{}}}],["object",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["object.values(bookingpaymentenum",{"_index":395,"title":{},"body":{"classes/Booking.html":{}}}],["object.values(bookingstatusenum",{"_index":393,"title":{},"body":{"classes/Booking.html":{}}}],["observable",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["odm",{"_index":1013,"title":{},"body":{"index.html":{}}}],["omit",{"_index":709,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["one",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":1033,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateUserDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":355,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["options.hashedpassword",{"_index":728,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["options.password",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["organizer",{"_index":543,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["organizerid",{"_index":370,"title":{},"body":{"classes/Booking.html":{},"injectables/BookingService.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"injectables/EventsService.html":{}}}],["organizerid.tostring",{"_index":678,"title":{},"body":{"injectables/EventsService.html":{}}}],["organizers",{"_index":313,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["origin",{"_index":1032,"title":{},"body":{"index.html":{}}}],["out",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1043,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":893,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paid",{"_index":391,"title":{},"body":{"classes/Booking.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":245,"title":{},"body":{"controllers/ArtistController.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"injectables/HashingProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["park",{"_index":560,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["partialtype",{"_index":773,"title":{},"body":{"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createartistdto",{"_index":772,"title":{},"body":{"classes/UpdateArtistDto.html":{}}}],["partialtype(createbookingdto",{"_index":775,"title":{},"body":{"classes/UpdateBookingDto.html":{}}}],["partialtype(createeventdto",{"_index":777,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["partialtype(createuserdto",{"_index":780,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passed",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["password",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["password123",{"_index":737,"title":{},"body":{"classes/LoginDto.html":{}}}],["password123'})@isnotempty()@isstring()@transform",{"_index":734,"title":{},"body":{"classes/LoginDto.html":{}}}],["passwords",{"_index":724,"title":{},"body":{"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":244,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":268,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["patch(':id/confirm",{"_index":441,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["patch(':id/confirm')@apioperation({summary",{"_index":407,"title":{},"body":{"controllers/BookingController.html":{}}}],["patch(':id/confirm/payment",{"_index":444,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["patch(':id/confirm/payment')@apioperation({summary",{"_index":416,"title":{},"body":{"controllers/BookingController.html":{}}}],["path",{"_index":685,"title":{},"body":{"injectables/EventsService.html":{}}}],["payload",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{}}}],["payment",{"_index":418,"title":{},"body":{"controllers/BookingController.html":{},"classes/CreateBookingDto.html":{},"classes/ToNumberPipe.html":{}}}],["payment'})@apiparam({name",{"_index":417,"title":{},"body":{"controllers/BookingController.html":{}}}],["paymentstatus",{"_index":371,"title":{},"body":{"classes/Booking.html":{},"classes/CreateBookingDto.html":{}}}],["pending",{"_index":388,"title":{},"body":{"classes/Booking.html":{},"miscellaneous/enumerations.html":{}}}],["per",{"_index":510,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["performance",{"_index":532,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["performance'})@isnotempty()@isnumber",{"_index":511,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["performing",{"_index":634,"title":{},"body":{"classes/Event.html":{}}}],["pipetransform",{"_index":428,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["plain",{"_index":722,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["platform",{"_index":506,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["platforms",{"_index":216,"title":{},"body":{"classes/Artist.html":{}}}],["pnpm",{"_index":941,"title":{},"body":{"index.html":{}}}],["pointtechnologies",{"_index":1008,"title":{},"body":{"index.html":{}}}],["populate",{"_index":686,"title":{},"body":{"injectables/EventsService.html":{}}}],["populate('artists",{"_index":683,"title":{},"body":{"injectables/EventsService.html":{}}}],["post",{"_index":242,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":823,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login')@apioperation({summary",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('register",{"_index":819,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('register')@apioperation({summary",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apioperation({summary",{"_index":228,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{}}}],["prefix",{"_index":223,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":938,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":995,"title":{},"body":{"index.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":958,"title":{},"body":{"index.html":{}}}],["profile",{"_index":679,"title":{},"body":{"injectables/EventsService.html":{}}}],["programming",{"_index":1015,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1010,"title":{},"body":{"index.html":{}}}],["project",{"_index":998,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"injectables/EventsService.html":{},"injectables/HashingProvider.html":{}}}],["promise.all",{"_index":712,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["prop",{"_index":204,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["prop({default",{"_index":378,"title":{},"body":{"classes/Booking.html":{},"classes/User.html":{}}}],["prop({required",{"_index":784,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":189,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/User.html":{}}}],["properties",{"_index":177,"title":{"properties.html":{}},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["pull",{"_index":1034,"title":{},"body":{"index.html":{}}}],["push",{"_index":1031,"title":{},"body":{"index.html":{}}}],["query",{"_index":427,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["rate",{"_index":183,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["readonly",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ref",{"_index":202,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{}}}],["reference",{"_index":528,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/Event.html":{}}}],["reference'})@isnotempty()@ismongoid",{"_index":518,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{}}}],["reference'})@prop({type",{"_index":629,"title":{},"body":{"classes/Event.html":{}}}],["reflect",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":741,"title":{},"body":{"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtoken",{"_index":711,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["refreshtokendto",{"_index":738,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":746,"title":{"injectables/RefreshTokenProvider.html":{}},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["register",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(@body",{"_index":821,"title":{},"body":{"controllers/UsersController.html":{}}}],["register(createuserdto",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{}}}],["registered",{"_index":820,"title":{},"body":{"controllers/UsersController.html":{}}}],["registered'})@apiresponse({status",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["reload",{"_index":981,"title":{},"body":{"index.html":{}}}],["remove(@param('id",{"_index":272,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":329,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":330,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["report",{"_index":990,"title":{},"body":{"index.html":{}}}],["repository",{"_index":948,"title":{},"body":{"index.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":101,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request_user_key",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["requesttimeoutexception(`${error.message",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["requesttimeoutexception(error.message",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":190,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{},"index.html":{}}}],["reset",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":343,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["results",{"_index":108,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["run",{"_index":984,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["schema",{"_index":205,"title":{},"body":{"classes/Artist.html":{},"modules/ArtistModule.html":{},"classes/Booking.html":{},"modules/BookingModule.html":{},"classes/Event.html":{},"modules/EventsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":206,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(artist",{"_index":220,"title":{},"body":{"classes/Artist.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(booking",{"_index":399,"title":{},"body":{"classes/Booking.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(event",{"_index":638,"title":{},"body":{"classes/Event.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":791,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["scripts",{"_index":977,"title":{},"body":{"index.html":{}}}],["secret",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["sender",{"_index":486,"title":{},"body":{"injectables/BookingService.html":{}}}],["sent",{"_index":760,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["service",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["services",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["set",{"_index":952,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":707,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["singleuser",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["singleuser(@param('id",{"_index":826,"title":{},"body":{"controllers/UsersController.html":{}}}],["singleuser(id",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["social",{"_index":513,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["sociallinks",{"_index":184,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateArtistDto.html":{},"classes/UpdateBookingDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src",{"_index":1000,"title":{},"body":{"index.html":{}}}],["src/.../access",{"_index":1054,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../artist.entity.ts",{"_index":1052,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../booking.entity.ts",{"_index":923,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../event.entity.ts",{"_index":1053,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":926,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.entity.ts",{"_index":924,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":170,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":171,"title":{},"body":{"injectables/AppService.html":{}}}],["src/artist/artist.controller.ts",{"_index":222,"title":{},"body":{"controllers/ArtistController.html":{},"coverage.html":{}}}],["src/artist/artist.controller.ts:16",{"_index":235,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.controller.ts:23",{"_index":241,"title":{},"body":{"controllers/ArtistController.html":{}}}],["src/artist/artist.module",{"_index":458,"title":{},"body":{"modules/BookingModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["src/artist/artist.module.ts",{"_index":277,"title":{},"body":{"modules/ArtistModule.html":{}}}],["src/artist/artist.service",{"_index":473,"title":{},"body":{"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["src/artist/artist.service.ts",{"_index":285,"title":{},"body":{"injectables/ArtistService.html":{},"coverage.html":{}}}],["src/artist/artist.service.ts:10",{"_index":292,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:19",{"_index":294,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:61",{"_index":296,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:72",{"_index":300,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/artist.service.ts:92",{"_index":298,"title":{},"body":{"injectables/ArtistService.html":{}}}],["src/artist/dto/create",{"_index":495,"title":{},"body":{"classes/CreateArtistDto.html":{},"coverage.html":{}}}],["src/artist/dto/update",{"_index":771,"title":{},"body":{"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["src/artist/entities/artist.entity",{"_index":665,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/artist/entities/artist.entity.ts",{"_index":176,"title":{},"body":{"classes/Artist.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/artist/entities/artist.entity.ts:12",{"_index":203,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:18",{"_index":201,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:24",{"_index":197,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:30",{"_index":192,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:36",{"_index":191,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:42",{"_index":199,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:48",{"_index":200,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:54",{"_index":198,"title":{},"body":{"classes/Artist.html":{}}}],["src/artist/entities/artist.entity.ts:61",{"_index":196,"title":{},"body":{"classes/Artist.html":{}}}],["src/auth/dto/refresh",{"_index":739,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/providers/bcrypt.provider",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":348,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:34",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":690,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":719,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":721,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":726,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":747,"title":{},"body":{"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["src/booking/booking.controller.ts",{"_index":401,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"coverage.html":{}}}],["src/booking/booking.controller.ts:18",{"_index":770,"title":{},"body":{"classes/ToNumberPipe.html":{}}}],["src/booking/booking.controller.ts:32",{"_index":423,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/booking/booking.controller.ts:41",{"_index":414,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/booking/booking.controller.ts:50",{"_index":419,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/booking/booking.controller.ts:57",{"_index":426,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/booking/booking.module.ts",{"_index":453,"title":{},"body":{"modules/BookingModule.html":{}}}],["src/booking/booking.service.ts",{"_index":460,"title":{},"body":{"injectables/BookingService.html":{},"coverage.html":{}}}],["src/booking/booking.service.ts:16",{"_index":465,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/booking/booking.service.ts:26",{"_index":469,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/booking/booking.service.ts:56",{"_index":467,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/booking/booking.service.ts:77",{"_index":468,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/booking/booking.service.ts:98",{"_index":470,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/booking/dto/create",{"_index":533,"title":{},"body":{"classes/CreateBookingDto.html":{},"coverage.html":{}}}],["src/booking/dto/update",{"_index":774,"title":{},"body":{"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["src/booking/entities/booking.entity.ts",{"_index":366,"title":{},"body":{"classes/Booking.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/booking/entities/booking.entity.ts:23",{"_index":372,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:30",{"_index":381,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:37",{"_index":382,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:44",{"_index":387,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:51",{"_index":385,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:59",{"_index":377,"title":{},"body":{"classes/Booking.html":{}}}],["src/booking/entities/booking.entity.ts:64",{"_index":379,"title":{},"body":{"classes/Booking.html":{}}}],["src/config/jwt.config",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/events/dto/create",{"_index":550,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/events/dto/update",{"_index":776,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/events/entities/event.entity.ts",{"_index":615,"title":{},"body":{"classes/Event.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/events/entities/event.entity.ts:13",{"_index":630,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:21",{"_index":626,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:29",{"_index":624,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:36",{"_index":621,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:44",{"_index":628,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:64",{"_index":619,"title":{},"body":{"classes/Event.html":{}}}],["src/events/entities/event.entity.ts:71",{"_index":633,"title":{},"body":{"classes/Event.html":{}}}],["src/events/events.controller.ts",{"_index":640,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:24",{"_index":645,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:31",{"_index":647,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module",{"_index":457,"title":{},"body":{"modules/BookingModule.html":{}}}],["src/events/events.module.ts",{"_index":662,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.service",{"_index":472,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/events/events.service.ts",{"_index":667,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:13",{"_index":670,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:22",{"_index":672,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:70",{"_index":675,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:90",{"_index":673,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/main.ts",{"_index":889,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login.dto.ts",{"_index":730,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/users/dto/login.dto.ts:12",{"_index":733,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/users/dto/login.dto.ts:21",{"_index":735,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/users/dto/update",{"_index":779,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":281,"title":{},"body":{"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{}}}],["src/users/entities/user.entity.ts",{"_index":782,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/user.entity.ts:15",{"_index":787,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":786,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":788,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":789,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":783,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:23",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:40",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":456,"title":{},"body":{"modules/BookingModule.html":{}}}],["src/users/users.module.ts",{"_index":833,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":471,"title":{},"body":{"injectables/BookingService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["src/users/users.service.ts",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:81",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:95",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["stage",{"_index":515,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["stagename",{"_index":185,"title":{},"body":{"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{}}}],["start",{"_index":979,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":978,"title":{},"body":{"index.html":{}}}],["start:devthe",{"_index":966,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":982,"title":{},"body":{"index.html":{}}}],["start:prodapi",{"_index":970,"title":{},"body":{"index.html":{}}}],["started",{"_index":928,"title":{"index.html":{}},"body":{}}],["statements",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":259,"title":{},"body":{"controllers/ArtistController.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["status'})@isnotempty()@isboolean",{"_index":497,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["streaming",{"_index":215,"title":{},"body":{"classes/Artist.html":{},"classes/CreateArtistDto.html":{}}}],["string",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":999,"title":{},"body":{"index.html":{}}}],["sub",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["successfully",{"_index":231,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":258,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["summer",{"_index":563,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["support",{"_index":1040,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1041,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":937,"title":{},"body":{"index.html":{}}}],["t",{"_index":697,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["table",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":931,"title":{},"body":{"index.html":{}}}],["task.onrender.com/api",{"_index":976,"title":{},"body":{"index.html":{}}}],["test",{"_index":983,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":989,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":987,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1018,"title":{},"body":{"index.html":{}}}],["tests",{"_index":986,"title":{},"body":{"index.html":{}}}],["text",{"_index":723,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["this.appservice.gethello",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["this.artistmodel.create",{"_index":319,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.artistmodel.find",{"_index":322,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.artistmodel.findbyid(id",{"_index":325,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.artistmodel.findone",{"_index":317,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["this.artistservice.create(createartistdto",{"_index":262,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findall",{"_index":263,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.findartistbyid(artistid",{"_index":481,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.artistservice.findone(+id",{"_index":267,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.remove(+id",{"_index":273,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.artistservice.update(+id",{"_index":270,"title":{},"body":{"controllers/ArtistController.html":{}}}],["this.bookingmodel.create",{"_index":483,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingmodel.find",{"_index":494,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingmodel.findbyid(id",{"_index":488,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingservice.confirmbooking(id",{"_index":443,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.bookingservice.confirmbookingpayment(id",{"_index":446,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.bookingservice.createbooking(createbookingdto",{"_index":440,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.bookingservice.findall",{"_index":447,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.bookingservice.remove(+id",{"_index":449,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.bookingservice.update(+id",{"_index":448,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["this.createtoken",{"_index":713,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.eventmodel.create",{"_index":681,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventmodel.find",{"_index":687,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventmodel.find({}).populate",{"_index":684,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventmodel.findbyid(id",{"_index":682,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.create(createeventdto",{"_index":653,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findall",{"_index":654,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findeventbyid(eventid",{"_index":482,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.eventsservice.findone(+id",{"_index":655,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.remove(+id",{"_index":657,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.update(+id",{"_index":656,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.extractrequestfromheader",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.finduserbyemail(email",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokenprovider.generatetokens",{"_index":768,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingprovider.hashpassword",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtconfiguration.jwtrefreshtokenexpiration",{"_index":717,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwtsecret",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenaudience",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenexpiration",{"_index":714,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.jwttokenissuer",{"_index":98,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":708,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":761,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.usermodel.create",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid",{"_index":677,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.usermodel.findbyid(id).select",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(user._id).select",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":306,"title":{},"body":{"injectables/ArtistService.html":{}}}],["this.usermodel.findone",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.findbyid(organizerid",{"_index":476,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.userservice.findbyid(sub.tostring",{"_index":765,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["this.usersservice.create(createuserdto",{"_index":822,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":827,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.login(logindto",{"_index":825,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":829,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":828,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":972,"title":{},"body":{"index.html":{}}}],["throw",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["tickets",{"_index":567,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{}}}],["tickets'})@prop({type",{"_index":627,"title":{},"body":{"classes/Event.html":{}}}],["time",{"_index":554,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/Event.html":{}}}],["time'})@prop({type",{"_index":620,"title":{},"body":{"classes/Event.html":{}}}],["timeout",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["timestamp",{"_index":635,"title":{},"body":{"classes/Event.html":{}}}],["timestamp'})@prop({type",{"_index":618,"title":{},"body":{"classes/Event.html":{}}}],["timestamps",{"_index":392,"title":{},"body":{"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["todo",{"_index":484,"title":{},"body":{"injectables/BookingService.html":{}}}],["token",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokenProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{}}}],["token.dto",{"_index":757,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.dto.ts",{"_index":740,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:11",{"_index":744,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":755,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.guard.ts:27",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:43",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":753,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts",{"_index":691,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:17",{"_index":749,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:18",{"_index":696,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:32",{"_index":751,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token.provider.ts:47",{"_index":699,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.provider.ts:8",{"_index":694,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["token.refreshtoken",{"_index":762,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":767,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["tonumberpipe",{"_index":434,"title":{"classes/ToNumberPipe.html":{}},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"coverage.html":{}}}],["transform",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ToNumberPipe.html":{}}}],["transform(value",{"_index":435,"title":{},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{}}}],["transformer",{"_index":574,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["trim",{"_index":623,"title":{},"body":{"classes/Event.html":{}}}],["true",{"_index":100,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"classes/Artist.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/CreateEventDto.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["true})@arrayminsize(1)@isnotempty",{"_index":504,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["true})@isnotempty",{"_index":508,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["try",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/EventsService.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Artist.html":{},"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"injectables/BcryptProvider.html":{},"classes/Booking.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/Event.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/HashingProvider.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/ToNumberPipe.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1050,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1014,"title":{},"body":{"index.html":{}}}],["ui",{"_index":973,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"classes/Artist.html":{},"classes/Booking.html":{},"classes/Event.html":{},"classes/User.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":503,"title":{},"body":{"classes/CreateArtistDto.html":{}}}],["under",{"_index":1037,"title":{},"body":{"index.html":{}}}],["unique",{"_index":785,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":985,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":295,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1038,"title":{},"body":{"index.html":{},"properties.html":{}}}],["up",{"_index":953,"title":{},"body":{"index.html":{}}}],["update",{"_index":632,"title":{},"body":{"classes/Event.html":{}}}],["update(@param('id",{"_index":269,"title":{},"body":{"controllers/ArtistController.html":{},"controllers/BookingController.html":{},"controllers/EventsController.html":{},"classes/ToNumberPipe.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":326,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["updateartistdto",{"_index":251,"title":{"classes/UpdateArtistDto.html":{}},"body":{"controllers/ArtistController.html":{},"injectables/ArtistService.html":{},"classes/UpdateArtistDto.html":{},"coverage.html":{}}}],["updatebookingdto",{"_index":432,"title":{"classes/UpdateBookingDto.html":{}},"body":{"controllers/BookingController.html":{},"classes/ToNumberPipe.html":{},"classes/UpdateBookingDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":616,"title":{},"body":{"classes/Event.html":{}}}],["updateeventdto",{"_index":650,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["updates",{"_index":328,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":778,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uri",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["usd",{"_index":536,"title":{},"body":{"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{}}}],["used",{"_index":1009,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["usenewurlparser",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"classes/Artist.html":{},"modules/ArtistModule.html":{},"injectables/ArtistService.html":{},"classes/Booking.html":{},"classes/CreateArtistDto.html":{},"classes/Event.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"classes/LoginDto.html":{},"injectables/RefreshTokenProvider.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["user._id",{"_index":715,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.dto",{"_index":781,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":716,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.id",{"_index":718,"title":{},"body":{"injectables/GenerateTokenProvider.html":{}}}],["user.name",{"_index":284,"title":{},"body":{"modules/ArtistModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{}}}],["user.save",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["user@example.com",{"_index":736,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isnotempty()@isemail",{"_index":732,"title":{},"body":{"classes/LoginDto.html":{}}}],["userdocument",{"_index":790,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":186,"title":{},"body":{"classes/Artist.html":{},"injectables/ArtistService.html":{},"classes/CreateArtistDto.html":{},"injectables/EventsService.html":{},"injectables/GenerateTokenProvider.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":291,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["userpayload",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokenProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userrole",{"_index":302,"title":{},"body":{"injectables/ArtistService.html":{},"injectables/BookingService.html":{},"classes/CreateUserDto.html":{},"injectables/EventsService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.organizer",{"_index":479,"title":{},"body":{"injectables/BookingService.html":{},"injectables/EventsService.html":{}}}],["userrole.user",{"_index":312,"title":{},"body":{"injectables/ArtistService.html":{},"classes/User.html":{}}}],["users",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["users.controller",{"_index":834,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":280,"title":{},"body":{"modules/ArtistModule.html":{},"modules/EventsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":792,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":462,"title":{},"body":{"injectables/BookingService.html":{},"injectables/RefreshTokenProvider.html":{}}}],["usersmodule",{"_index":135,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":463,"title":{"injectables/UsersService.html":{}},"body":{"injectables/BookingService.html":{},"injectables/RefreshTokenProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useunifiedtopology",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":350,"title":{},"body":{"injectables/BcryptProvider.html":{},"index.html":{}}}],["utilities",{"_index":1003,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["validationschema",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":527,"title":{},"body":{"classes/CreateArtistDto.html":{},"classes/CreateBookingDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"dependencies.html":{}}}],["value",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/ToNumberPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["values",{"_index":702,"title":{},"body":{"injectables/GenerateTokenProvider.html":{},"injectables/RefreshTokenProvider.html":{}}}],["variable",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":954,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":759,"title":{},"body":{"injectables/RefreshTokenProvider.html":{}}}],["version",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{},"properties.html":{}}}],["whether",{"_index":345,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["world",{"_index":173,"title":{},"body":{"injectables/AppService.html":{}}}],["york",{"_index":576,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["york'})@isnotempty()@isstring",{"_index":561,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/ArtistModule.html":{},"modules/BookingModule.html":{},"modules/EventsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/config/jwt.config';\n\nexport const REQUEST_USER_KEY = 'user';\n\nexport type UserPayload = {\n  sub: number;\n  email: string;\n  iat: number;\n  exp: number;\n  aud: string;\n  iss: string;\n};\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    // injecting necessary services here\n\n    // injecting jwt service\n    private jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private extractRequestFromHeader({ request }: { request: Request }) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get the request object from the execution context\n    const request = context.switchToHttp().getRequest();\n\n    // extract the token from the request (header)\n    const token = this.extractRequestFromHeader({ request });\n    // console.log('inside canActivate', token);\n\n    // validate the token\n    if (!token) {\n      throw new HttpException('No token passed', HttpStatus.UNAUTHORIZED);\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: this.jwtConfiguration.jwtSecret,\n        // audience: this.jwtConfiguration.jwtTokenAudience,\n        // issuer: this.jwtConfiguration.jwtTokenIssuer,\n        // ignoreExpiration: true\n      });\n      request[REQUEST_USER_KEY] = payload as UserPayload;\n    } catch (error: any) {\n      throw new HttpException(`${error.message}`, HttpStatus.UNAUTHORIZED, {\n        cause: error.message,\n        description: error,\n      });\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArtistModule\n\nArtistModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\n\n\nBookingModule\n\nBookingModule\n\nAppModule -->\n\nBookingModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArtistModule\n                        \n                        \n                            BookingModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { ArtistModule } from './artist/artist.module';\nimport { EventsModule } from './events/events.module';\nimport { BookingModule } from './booking/booking.module';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environmentValidation';\n\nconst ENV = process.env.NODE_ENV || 'development';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ENV === 'development' ? `.env.${ENV}.local` : `.env`,\n      load: [databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      }),\n    }),\n\n    UsersModule,\n\n    ArtistModule,\n\n    EventsModule,\n\n    BookingModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Artist.html":{"url":"classes/Artist.html","title":"class - Artist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Artist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/entities/artist.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                availability\n                            \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                genre\n                            \n                            \n                                    \n                                media\n                            \n                            \n                                    \n                                rate\n                            \n                            \n                                    \n                                socialLinks\n                            \n                            \n                                    \n                                stageName\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        availability\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        socialLinks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stageName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/entities/artist.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, HydratedDocument, Schema as MongooseSchema } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema()\nexport class Artist extends Document {\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  })\n  userId: string;\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  stageName: string;\n\n  @Prop({\n    type: [String],\n    required: true,\n  })\n  genre: string[];\n\n  @Prop({\n    type: String,\n    required: true,\n  })\n  bio: string;\n\n  @Prop({\n    type: Boolean,\n    required: true,\n  })\n  availability: boolean;\n\n  @Prop({\n    type: Number,\n    required: true,\n  })\n  rate: number;\n\n  @Prop({\n    type: [String],\n    required: true,\n  })\n  socialLinks: string[];\n\n  @Prop({\n    type: [String],\n    required: true,\n  })\n  media: string[]; // streaming platforms\n\n  @Prop({\n    type: Date,\n    required: true,\n    default: Date.now,\n  })\n  createdAt: Date;\n}\n\nexport type ArtistDocument = HydratedDocument;\n\nexport const ArtistSchema = SchemaFactory.createForClass(Artist);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArtistController.html":{"url":"controllers/ArtistController.html","title":"controller - ArtistController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArtistController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                artist\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllArtists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createArtistDto: CreateArtistDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new artist'})@ApiResponse({status: 201, description: 'Artist successfully created'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/artist/artist.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createArtistDto\n                                            \n                                                            CreateArtistDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllArtists\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllArtists()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all artists'})@ApiResponse({status: 200, description: 'List of all artists'})\n                \n            \n\n                    \n                        \n                            Defined in src/artist/artist.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ArtistService } from './artist.service';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('artists')\n@Controller('artist')\nexport class ArtistController {\n  constructor(private readonly artistService: ArtistService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new artist' })\n  @ApiResponse({ status: 201, description: 'Artist successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  create(@Body() createArtistDto: CreateArtistDto) {\n    return this.artistService.create(createArtistDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all artists' })\n  @ApiResponse({ status: 200, description: 'List of all artists' })\n  getAllArtists() {\n    return this.artistService.findAll();\n  }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.artistService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateArtistDto: UpdateArtistDto) {\n  //   return this.artistService.update(+id, updateArtistDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.artistService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArtistModule.html":{"url":"modules/ArtistModule.html","title":"module - ArtistModule","body":"\n                   \n\n\n\n\n    Modules\n    ArtistModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_providers\n\n\n\ncluster_ArtistModule_exports\n\n\n\n\nArtistService \n\nArtistService \n\n\n\nArtistModule\n\nArtistModule\n\nArtistService  -->\n\nArtistModule->ArtistService \n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/artist/artist.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArtistService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArtistController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ArtistService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ArtistService } from './artist.service';\nimport { ArtistController } from './artist.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Artist, ArtistSchema } from './entities/artist.entity';\nimport { User, UserSchema } from 'src/users/entities/user.entity';\n\n@Module({\n  controllers: [ArtistController],\n  providers: [ArtistService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Artist.name,\n        schema: ArtistSchema,\n      },\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  exports: [ArtistService]\n})\nexport class ArtistModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArtistService.html":{"url":"injectables/ArtistService.html","title":"injectable - ArtistService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArtistService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/artist.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findArtistById\n                            \n                            \n                                    Async\n                                findArtistByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(artistModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/artist/artist.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        artistModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createArtistDto: CreateArtistDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/artist/artist.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createArtistDto\n                                            \n                                                            CreateArtistDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/artist/artist.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findArtistById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findArtistById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/artist/artist.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findArtistByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findArtistByUserId(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/artist/artist.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateArtistDto } from './dto/create-artist.dto';\nimport { UpdateArtistDto } from './dto/update-artist.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Artist } from './entities/artist.entity';\nimport { User, UserRole } from 'src/users/entities/user.entity';\n\n@Injectable()\nexport class ArtistService {\n  constructor(\n    @InjectModel(Artist.name)\n    private readonly artistModel: Model,\n\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  async create(createArtistDto: CreateArtistDto) {\n    try {\n      const { userId, stageName } = createArtistDto;\n\n      const existingUser = await this.userModel.findById(userId);\n\n      if (!existingUser) {\n        throw new HttpException(`User doesn't Exists`, HttpStatus.BAD_REQUEST);\n      }\n\n      const userRole = existingUser.role as UserRole;\n\n      if (userRole !== UserRole.User) {\n        throw new HttpException(\n          'Organizers cant be Artist',\n          HttpStatus.BAD_GATEWAY,\n        );\n      }\n\n      const existingArtist = await this.artistModel.findOne({ userId });\n\n      if (existingArtist) {\n        throw new HttpException(\n          `Artist :${stageName} with userId: ${userId} already exists`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      const artist = await this.artistModel.create({\n        ...createArtistDto,\n      });\n      artist.save();\n\n      return artist;\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create artist: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findAll(): Promise {\n    try {\n      return await this.artistModel.find({});\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create artist: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findArtistByUserId(id: number): Promise {\n    try {\n      const artist = await this.artistModel.findOne({ userId: id });\n\n      if (!artist) {\n        throw new HttpException(\n          `Artist with userId: ${id} doesnt exist`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      return artist;\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create artist: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findArtistById(id: string): Promise {\n    try {\n      const artist = await this.artistModel.findById(id);\n\n      if (!artist) {\n        throw new HttpException(\n          `Artist with id: ${id} doesnt exist`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      return artist;\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create artist: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  // update(id: number, updateArtistDto: UpdateArtistDto) {\n  //   return `This action updates a #${id} artist`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} artist`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Compares a given password with its hashed version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        Hashes a given password using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to be hashed. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the hashed password as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Hashes a given password using bcrypt.\n   *\n   * @param options - The options for hashing the password.\n   * @param options.password - The password to be hashed. Can be a string or a Buffer.\n   *\n   * @returns A Promise that resolves to the hashed password as a string.\n   */\n  public async hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise {\n    const salt = await bcrypt.genSalt();\n    const hashed = bcrypt.hash(password, salt);\n\n    return hashed;\n  }\n\n  /**\n   * Compares a given password with its hashed version.\n   *\n   * @param password - The password to compare. It can be a string or a Buffer.\n   * @param hashedPassword - The hashed version of the password to compare against.\n   *\n   * @returns A Promise that resolves to a boolean indicating whether the password matches the hashed password.\n   */\n  comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise {\n    const compare = bcrypt.compare(password, hashedPassword);\n    return compare;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Booking.html":{"url":"classes/Booking.html","title":"class - Booking","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Booking\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/entities/booking.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                artistId\n                            \n                            \n                                    \n                                    \n                                budget\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                eventId\n                            \n                            \n                                    \n                                organizerId\n                            \n                            \n                                    \n                                paymentStatus\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Artist', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        budget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist Booking budget'})@Prop({type: Number, required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Event', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        organizerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingPaymentEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/entities/booking.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, HydratedDocument, Schema as MongooseSchema } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport enum BookingStatusEnum {\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Cancelled = 'cancelled',\n}\n\nexport enum BookingPaymentEnum {\n  Pending = 'pending',\n  Paid = 'paid',\n}\n\n@Schema({ timestamps: true })\nexport class Booking {\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: 'Artist',\n    required: true,\n  })\n  artistId: string;\n\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: 'Event',\n    required: true,\n  })\n  eventId: string;\n\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  })\n  organizerId: string;\n\n  @Prop({\n    type: String,\n    enum: Object.values(BookingStatusEnum),\n    default: BookingStatusEnum.Pending,\n  })\n  status: BookingStatusEnum;\n\n  @Prop({\n    type: String,\n    enum: Object.values(BookingPaymentEnum),\n    default: BookingPaymentEnum.Pending,\n  })\n  paymentStatus: BookingPaymentEnum;\n\n  @ApiProperty({ description: 'Artist Booking budget' })\n  @Prop({\n    type: Number,\n    required: true,\n    min: 0,\n  })\n  budget: number;\n\n  @Prop({\n    default: Date.now,\n  })\n  createdAt: Date;\n}\n\nexport type BookingDocument = HydratedDocument;\n\nexport const BookingSchema = SchemaFactory.createForClass(Booking);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookingController.html":{"url":"controllers/BookingController.html","title":"controller - BookingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/booking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                booking\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmBooking\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                confirmBookingPayment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                createBooking\n                            \n                            \n                                    \n                                    \n                                    \n                                getAllBookings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmBooking(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/confirm')@ApiOperation({summary: 'Confirm a booking'})@ApiParam({name: 'id', description: 'Booking ID'})@ApiResponse({status: 200, description: 'Booking successfully confirmed'})@ApiResponse({status: 404, description: 'Booking not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/booking/booking.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        confirmBookingPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmBookingPayment(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/confirm/payment')@ApiOperation({summary: 'Confirm booking payment'})@ApiParam({name: 'id', description: 'Booking ID'})@ApiResponse({status: 200, description: 'Booking payment successfully confirmed'})@ApiResponse({status: 404, description: 'Booking not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/booking/booking.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        createBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBooking(createBookingDto: CreateBookingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new booking'})@ApiResponse({status: 201, description: 'Booking successfully created'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/booking/booking.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBookingDto\n                                            \n                                                            CreateBookingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getAllBookings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllBookings()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all bookings'})@ApiResponse({status: 200, description: 'List of all bookings'})\n                \n            \n\n                    \n                        \n                            Defined in src/booking/booking.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  PipeTransform,\n} from '@nestjs/common';\nimport { BookingService } from './booking.service';\nimport { CreateBookingDto } from './dto/create-booking.dto';\nimport { UpdateBookingDto } from './dto/update-booking.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';\n\nclass ToNumberPipe implements PipeTransform {\n  transform(value: string): number {\n    return Number(value);\n  }\n}\n\n@ApiTags('bookings')\n@Controller('booking')\nexport class BookingController {\n  constructor(private readonly bookingService: BookingService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new booking' })\n  @ApiResponse({ status: 201, description: 'Booking successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  createBooking(@Body() createBookingDto: CreateBookingDto) {\n    return this.bookingService.createBooking(createBookingDto);\n  }\n\n  @Patch(':id/confirm')\n  @ApiOperation({ summary: 'Confirm a booking' })\n  @ApiParam({ name: 'id', description: 'Booking ID' })\n  @ApiResponse({ status: 200, description: 'Booking successfully confirmed' })\n  @ApiResponse({ status: 404, description: 'Booking not found' })\n  confirmBooking(@Param('id') id: string) {\n    return this.bookingService.confirmBooking(id);\n  }\n\n  @Patch(':id/confirm/payment')\n  @ApiOperation({ summary: 'Confirm booking payment' })\n  @ApiParam({ name: 'id', description: 'Booking ID' })\n  @ApiResponse({ status: 200, description: 'Booking payment successfully confirmed' })\n  @ApiResponse({ status: 404, description: 'Booking not found' })\n  confirmBookingPayment(@Param('id') id: string) {\n    return this.bookingService.confirmBookingPayment(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all bookings' })\n  @ApiResponse({ status: 200, description: 'List of all bookings' })\n  getAllBookings() {\n    return this.bookingService.findAll();\n  }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateBookingDto: UpdateBookingDto) {\n  //   return this.bookingService.update(+id, updateBookingDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.bookingService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookingModule.html":{"url":"modules/BookingModule.html","title":"module - BookingModule","body":"\n                   \n\n\n\n\n    Modules\n    BookingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BookingModule\n\n\n\ncluster_BookingModule_imports\n\n\n\ncluster_BookingModule_providers\n\n\n\n\nArtistModule\n\nArtistModule\n\n\n\nBookingModule\n\nBookingModule\n\nBookingModule -->\n\nArtistModule->BookingModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nBookingModule -->\n\nEventsModule->BookingModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nBookingModule -->\n\nUsersModule->BookingModule\n\n\n\n\n\nBookingService\n\nBookingService\n\nBookingModule -->\n\nBookingService->BookingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/booking/booking.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArtistModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BookingService } from './booking.service';\nimport { BookingController } from './booking.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Booking, BookingSchema } from './entities/booking.entity';\nimport { UsersModule } from 'src/users/users.module';\nimport { EventsModule } from 'src/events/events.module';\nimport { ArtistModule } from 'src/artist/artist.module';\n\n@Module({\n  controllers: [BookingController],\n  providers: [BookingService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Booking.name,\n        schema: BookingSchema,\n      },\n    ]),\n\n    UsersModule,\n    EventsModule,\n    ArtistModule,\n  ],\n})\nexport class BookingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingService.html":{"url":"injectables/BookingService.html","title":"injectable - BookingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/booking.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmBooking\n                            \n                            \n                                    Async\n                                confirmBookingPayment\n                            \n                            \n                                    Async\n                                createBooking\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookingModel: Model, userService: UsersService, eventsService: EventsService, artistService: ArtistService)\n                    \n                \n                        \n                            \n                                Defined in src/booking/booking.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookingModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        artistService\n                                                  \n                                                        \n                                                                        ArtistService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmBooking(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/booking/booking.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmBookingPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmBookingPayment(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/booking/booking.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBooking\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBooking(createBookingDto: CreateBookingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/booking/booking.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBookingDto\n                                            \n                                                            CreateBookingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/booking/booking.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateBookingDto } from './dto/create-booking.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport {\n  Booking,\n  BookingPaymentEnum,\n  BookingStatusEnum,\n} from './entities/booking.entity';\nimport { Model } from 'mongoose';\nimport { UsersService } from 'src/users/users.service';\nimport { UserRole } from 'src/users/entities/user.entity';\nimport { EventsService } from 'src/events/events.service';\nimport { ArtistService } from 'src/artist/artist.service';\n\n@Injectable()\nexport class BookingService {\n  constructor(\n    @InjectModel(Booking.name)\n    private readonly bookingModel: Model,\n\n    private readonly userService: UsersService,\n    private readonly eventsService: EventsService,\n    private readonly artistService: ArtistService,\n  ) {}\n\n  async createBooking(createBookingDto: CreateBookingDto) {\n    try {\n      const { artistId, organizerId, eventId } = createBookingDto;\n\n      const existingOrganizer = await this.userService.findById(organizerId);\n\n      const isOrganizer = existingOrganizer.user.role === UserRole.ORGANIZER;\n\n      if (!isOrganizer) {\n        throw new HttpException(\n          'Only Organizers can create Booking',\n          HttpStatus.FORBIDDEN,\n        );\n      }\n\n      await this.artistService.findArtistById(artistId);\n      await this.eventsService.findEventById(eventId);\n\n      return await this.bookingModel.create({\n        ...createBookingDto,\n      });\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  // TODO: check if the sender is the artist\n  async confirmBooking(id: string) {\n    try {\n      const existingBooking = await this.bookingModel.findById(id);\n\n      if (!existingBooking) {\n        throw new HttpException(\n          'Booking doesnt exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      existingBooking.status = BookingStatusEnum.Confirmed;\n      return existingBooking.save();\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async confirmBookingPayment(id: string) {\n    try {\n      const existingBooking = await this.bookingModel.findById(id);\n\n      if (!existingBooking) {\n        throw new HttpException(\n          'Booking doesnt exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      existingBooking.paymentStatus = BookingPaymentEnum.Paid;\n      return existingBooking.save();\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findAll() {\n    return await this.bookingModel.find({\n      status: BookingStatusEnum.Confirmed,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArtistDto.html":{"url":"classes/CreateArtistDto.html","title":"class - CreateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/create-artist.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                availability\n                            \n                            \n                                    \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                genre\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                media\n                            \n                            \n                                    \n                                    \n                                    \n                                rate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                socialLinks\n                            \n                            \n                                    \n                                    \n                                    \n                                stageName\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        availability\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist availability status'})@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist biography'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        genre\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Music genres', type: undefined})@IsArray()@IsString({each: true})@ArrayMinSize(1)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Streaming platform links', type: undefined})@IsArray()@IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist rate per performance'})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        socialLinks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Social media links', type: undefined})@IsArray()@IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stageName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist stage name'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID reference'})@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/artist/dto/create-artist.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsMongoId,\n  IsString,\n  IsArray,\n  IsBoolean,\n  IsNumber,\n  ArrayMinSize,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateArtistDto {\n  @ApiProperty({ description: 'User ID reference' })\n  @IsNotEmpty()\n  @IsMongoId()\n  userId: string;\n\n  @ApiProperty({ description: 'Artist stage name' })\n  @IsNotEmpty()\n  @IsString()\n  stageName: string;\n\n  @ApiProperty({ description: 'Music genres', type: [String] })\n  @IsArray()\n  @IsString({ each: true })\n  @ArrayMinSize(1)\n  @IsNotEmpty()\n  genre: string[];\n\n  @ApiProperty({ description: 'Artist biography' })\n  @IsNotEmpty()\n  @IsString()\n  bio: string;\n\n  @ApiProperty({ description: 'Artist availability status' })\n  @IsNotEmpty()\n  @IsBoolean()\n  availability: boolean;\n\n  @ApiProperty({ description: 'Artist rate per performance' })\n  @IsNotEmpty()\n  @IsNumber()\n  rate: number;\n\n  @ApiProperty({ description: 'Social media links', type: [String] })\n  @IsArray()\n  @IsString({ each: true })\n  @IsNotEmpty()\n  socialLinks: string[];\n\n  @ApiProperty({ description: 'Streaming platform links', type: [String] })\n  @IsArray()\n  @IsString({ each: true })\n  @IsNotEmpty()\n  media: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookingDto.html":{"url":"classes/CreateBookingDto.html","title":"class - CreateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/dto/create-booking.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                artistId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                budget\n                            \n                            \n                                    \n                                    \n                                    \n                                eventId\n                            \n                            \n                                    \n                                    \n                                    \n                                organizerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        artistId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Artist ID reference'})@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/dto/create-booking.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        budget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event budget in USD', example: 5000, minimum: 0})@IsNotEmpty()@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/dto/create-booking.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event ID reference'})@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/dto/create-booking.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        organizerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Organizer ID reference'})@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/booking/dto/create-booking.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsMongoId, IsEnum, IsNumber, Min } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport {\n  BookingPaymentEnum,\n  BookingStatusEnum,\n} from '../entities/booking.entity';\n\nexport class CreateBookingDto {\n  @ApiProperty({ description: 'Artist ID reference' })\n  @IsNotEmpty()\n  @IsMongoId()\n  artistId: string;\n\n  @ApiProperty({ description: 'Event ID reference' })\n  @IsNotEmpty()\n  @IsMongoId()\n  eventId: string;\n\n  @ApiProperty({ description: 'Organizer ID reference' })\n  @IsNotEmpty()\n  @IsMongoId()\n  organizerId: string;\n\n  @ApiProperty({\n    description: 'Event budget in USD',\n    example: 5000,\n    minimum: 0,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(0)\n  budget: number;\n\n  // @ApiProperty({\n  //   description: 'Booking status',\n  //   enum: BookingStatusEnum,\n  //   example: BookingStatusEnum.Pending,\n  // })\n  // @IsNotEmpty()\n  // @IsEnum(BookingStatusEnum)\n  // status: BookingStatusEnum;\n\n  // @ApiProperty({\n  //   description: 'Payment status',\n  //   enum: BookingPaymentEnum,\n  //   example: BookingPaymentEnum.Pending,\n  // })\n  // @IsNotEmpty()\n  // @IsEnum(BookingPaymentEnum)\n  // paymentStatus: BookingPaymentEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                numberOfTickets\n                            \n                            \n                                    \n                                    \n                                    \n                                organizerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event date and time', example: '2024-07-01T18:00:00.000Z'})@IsNotEmpty()@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event location', example: 'Central Park, New York'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event name', example: 'Summer Music Festival 2024'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        numberOfTickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of tickets for the event'})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        organizerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event organizer ID', example: '507f1f77bcf86cd799439011'})@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsMongoId,\n  IsString,\n  IsDate,\n  IsNumber,\n  IsArray,\n  Min,\n  IsOptional,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateEventDto {\n  @ApiProperty({\n    description: 'Event organizer ID',\n    example: '507f1f77bcf86cd799439011',\n  })\n  @IsNotEmpty()\n  @IsMongoId()\n  organizerId: string;\n\n  @ApiProperty({\n    description: 'Event name',\n    example: 'Summer Music Festival 2024',\n  })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: 'Event location',\n    example: 'Central Park, New York',\n  })\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n\n  @ApiProperty({\n    description: 'Event date and time',\n    example: '2024-07-01T18:00:00.000Z',\n  })\n  @IsNotEmpty()\n  @Type(() => Date)\n  @IsDate()\n  date: Date;\n\n  @ApiProperty({ description: 'Number of tickets for the event' })\n  @IsNotEmpty()\n  @IsNumber()\n  numberOfTickets: number;\n\n  // @ApiProperty({\n  //   description: 'Event budget in USD',\n  //   example: 5000,\n  //   minimum: 0,\n  // })\n  // @IsNotEmpty()\n  // @IsNumber()\n  // @Min(0)\n  // budget: number;\n\n  // @ApiProperty({\n  //   description: 'Array of artist IDs',\n  //   example: ['507f1f77bcf86cd799439011', '507f1f77bcf86cd799439012'],\n  //   type: [String],\n  // })\n  // @IsOptional()\n  // @IsArray()\n  // @IsMongoId({ each: true })\n  // artists: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Transform( => )@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEnum, IsOptional, IsEmail, MinLength, Matches, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRole } from '../entities/user.entity';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Transform(({ value }) => value.toLowerCase())\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n\n  @IsOptional()\n  @IsEnum(UserRole)\n  role?: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Event.html":{"url":"classes/Event.html","title":"class - Event","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/entities/event.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                numberOfTickets\n                            \n                            \n                                    \n                                    \n                                organizerId\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event creation timestamp'})@Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event date and time'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event location'})@Prop({type: String, required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event name'})@Prop({type: String, required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        numberOfTickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event number of tickets'})@Prop({type: Number, required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        organizerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event organizer reference'})@Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Event last update timestamp'})@Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, HydratedDocument, Schema as MongooseSchema } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema({ timestamps: true })\nexport class Event extends Document {\n  @ApiProperty({ description: 'Event organizer reference' })\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  })\n  organizerId: string;\n\n  @ApiProperty({ description: 'Event name' })\n  @Prop({\n    type: String,\n    required: true,\n    trim: true,\n  })\n  name: string;\n\n  @ApiProperty({ description: 'Event location' })\n  @Prop({\n    type: String,\n    required: true,\n    trim: true,\n  })\n  location: string;\n\n  @ApiProperty({ description: 'Event date and time' })\n  @Prop({\n    type: Date,\n    required: true,\n  })\n  date: Date;\n\n  @ApiProperty({ description: 'Event number of tickets' })\n  @Prop({\n    type: Number,\n    required: true,\n    min: 0,\n  })\n  numberOfTickets: number;\n\n  // @ApiProperty({ description: 'List of artists performing at the event' })\n  // @Prop({\n  //   type: [\n  //     {\n  //       type: MongooseSchema.Types.ObjectId,\n  //       ref: 'Artist',\n        \n  //     },\n  //   ],\n  //   default: [],\n  // })\n  // artists: string[];\n\n  @ApiProperty({ description: 'Event creation timestamp' })\n  @Prop({\n    type: Date,\n    default: Date.now,\n  })\n  createdAt: Date;\n\n  @ApiProperty({ description: 'Event last update timestamp' })\n  @Prop({\n    type: Date,\n    default: Date.now,\n  })\n  updatedAt: Date;\n}\n\nexport type EventDocument = HydratedDocument;\n\nexport const EventSchema = SchemaFactory.createForClass(Event);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                getEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new event'})@ApiResponse({status: 201, description: 'Event successfully created'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all events'})@ApiResponse({status: 200, description: 'List of all events'})\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('events')\n@Controller('events')\nexport class EventsController {\n  constructor(private readonly eventsService: EventsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new event' })\n  @ApiResponse({ status: 201, description: 'Event successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  create(@Body() createEventDto: CreateEventDto) {\n    return this.eventsService.create(createEventDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all events' })\n  @ApiResponse({ status: 200, description: 'List of all events' })\n  getEvents() {\n    return this.eventsService.findAll();\n  }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.eventsService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateEventDto: UpdateEventDto) {\n  //   return this.eventsService.update(+id, updateEventDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.eventsService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_imports\n\n\n\n\nArtistModule\n\nArtistModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nArtistModule->EventsModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArtistModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { EventsController } from './events.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Event, EventSchema } from './entities/event.entity';\nimport { User, UserSchema } from 'src/users/entities/user.entity';\nimport { Artist, ArtistSchema } from 'src/artist/entities/artist.entity';\nimport { ArtistModule } from 'src/artist/artist.module';\n\n@Module({\n  controllers: [EventsController],\n  providers: [EventsService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Event.name,\n        schema: EventSchema,\n      },\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n      {\n        name: Artist.name,\n        schema: ArtistSchema,\n      },\n    ]),\n\n    ArtistModule,\n  ],\n  exports: [EventsService]\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findEventById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Event } from './entities/event.entity';\nimport { Model } from 'mongoose';\nimport { User, UserRole } from 'src/users/entities/user.entity';\nimport { Artist } from 'src/artist/entities/artist.entity';\nimport { ArtistModule } from 'src/artist/artist.module';\nimport { ArtistService } from 'src/artist/artist.service';\n\n@Injectable()\nexport class EventsService {\n  constructor(\n    @InjectModel(Event.name)\n    private readonly eventModel: Model,\n\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  async create(createEventDto: CreateEventDto): Promise {\n    try {\n      const { organizerId } = createEventDto;\n\n      const existingOrganizer = await this.userModel.findById(\n        organizerId.toString(),\n      );\n\n      if (!existingOrganizer) {\n        throw new HttpException(\n          `User Profile doesn't Exists`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      const userRole = existingOrganizer.role as UserRole;\n\n      if (userRole !== UserRole.ORGANIZER) {\n        throw new HttpException(\n          'Only Organizers can create events',\n          HttpStatus.BAD_GATEWAY,\n        );\n      }\n\n      // for (const artist of artists) {\n      //   const existingArtist = await this.artistModel.findOne({\n      //     userId: artist,\n      //   });\n\n      //   if (!existingArtist) {\n      //     throw new HttpException(\n      //       `Artist with id: ${artist} doesnt exist`,\n      //       HttpStatus.BAD_REQUEST,\n      //     );\n      //   }\n      // }\n\n      return await this.eventModel.create({\n        ...createEventDto,\n      });\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findEventById(id: string): Promise {\n    try {\n      const event = await this.eventModel.findById(id);\n\n      if (!event) {\n        throw new HttpException(\n          `Event with id: ${id} doesnt exists`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      return event;\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  async findAll(): Promise {\n    try {\n      // // .populate('artists');\n      // return await this.eventModel.find({}).populate({\n      //   path: 'artists',\n      //   model: 'Artist',\n      //   populate: {\n      //     path: 'userId',\n      //     model: 'User',\n      //   },\n      // });\n\n      return await this.eventModel.find({});\n    } catch (error) {\n      throw new HttpException(\n        `Failed to create event: ${error.message}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  // findOne(id: number) {\n  //   return `This action returns a #${id} event`;\n  // }\n\n  // update(id: number, updateEventDto: UpdateEventDto) {\n  //   return `This action updates a #${id} event`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} event`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokenProvider.html":{"url":"injectables/GenerateTokenProvider.html","title":"injectable - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-token.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-token.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        generateTokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from 'src/config/jwt.config';\nimport { User } from 'src/users/entities/user.entity';\n\n@Injectable()\nexport class GenerateTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n  ) {}\n\n  private async createToken({\n    userId,\n    expiresIn,\n    payload,\n  }: {\n    userId: number;\n    expiresIn: number;\n    payload?: T;\n  }) {\n    // generate jwt(refresh) token for authenticated user\n    const signToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        expiresIn: expiresIn,\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      },\n    );\n\n    return signToken;\n  }\n\n  /**\n   * generateTokens\n   */\n  public async generateTokens({\n    user,\n  }: {\n    // user: Omit;\n    user: User;\n  }) {\n    const [accessToken, refreshToken] = await Promise.all([\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtTokenExpiration,\n        userId: user._id as number,\n        payload: {\n          email: user.email,\n        },\n      }),\n\n      await this.createToken({\n        expiresIn: this.jwtConfiguration.jwtRefreshTokenExpiration,\n        userId: user.id,\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        Compares a plain text password with a hashed password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                [object Object]\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe plain text password to compare. Can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to a boolean indicating whether the passwords match.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword({\n    password,\n  }: {\n    password: string | Buffer;\n  }): Promise;\n\n  /**\n   * Compares a plain text password with a hashed password.\n   * \n   * @param options - The options for password comparison.\n   * @param options.password - The plain text password to compare. Can be a string or a Buffer.\n   * @param options.hashedPassword - The hashed password to compare against.\n   * @returns A promise that resolves to a boolean indicating whether the passwords match.\n   */\n  abstract comparePasswords({\n    password,\n    hashedPassword,\n  }: {\n    password: string | Buffer;\n    hashedPassword: string;\n  }): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'user@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'password123'})@IsNotEmpty()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEnum, IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'user@example.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: 'password123',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @Transform(({ value }) => value.toLowerCase())\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token for authentication', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token for authentication',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsString()\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenProvider.html":{"url":"injectables/RefreshTokenProvider.html","title":"injectable - RefreshTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokenProvider, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-token.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-token.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { UserPayload } from '../guards/access-token/access-token.guard';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto';\nimport jwtConfig from 'src/config/jwt.config';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class RefreshTokenProvider {\n  constructor(\n    // injecting jwt service dependency\n    private jwtService: JwtService,\n\n    // injecting jwtConfig (environment values)\n    @Inject(jwtConfig.KEY)\n    private jwtConfiguration: ConfigType,\n\n    private generateTokenProvider: GenerateTokenProvider,\n\n    // @Inject(forwardRef(() => UserService))\n    private userService: UsersService,\n  ) {}\n\n  public async getRefreshToken({ token }: { token: RefreshTokenDto }) {\n    try {\n      // verify the refresh token sent\n      const { sub } = await this.jwtService.verifyAsync\n      >(token.refreshToken, {\n        secret: this.jwtConfiguration.jwtSecret,\n        audience: this.jwtConfiguration.jwtTokenAudience,\n        issuer: this.jwtConfiguration.jwtTokenIssuer,\n      });\n      // fetch the user\n      const checkUser = await this.userService.findById(sub.toString());\n\n      const { user } = checkUser;\n\n      // generate new access and refresh tokens\n      const { accessToken, refreshToken } =\n        await this.generateTokenProvider.generateTokens({\n          user,\n        });\n\n      return { accessToken, refreshToken };\n    } catch (error: any) {\n      throw new HttpException(\n        `Invalid refresh token ${error.message}`,\n        HttpStatus.UNAUTHORIZED,\n        {\n          cause: error.message,\n          description: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToNumberPipe.html":{"url":"classes/ToNumberPipe.html","title":"class - ToNumberPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToNumberPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/booking.controller.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/booking/booking.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  PipeTransform,\n} from '@nestjs/common';\nimport { BookingService } from './booking.service';\nimport { CreateBookingDto } from './dto/create-booking.dto';\nimport { UpdateBookingDto } from './dto/update-booking.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';\n\nclass ToNumberPipe implements PipeTransform {\n  transform(value: string): number {\n    return Number(value);\n  }\n}\n\n@ApiTags('bookings')\n@Controller('booking')\nexport class BookingController {\n  constructor(private readonly bookingService: BookingService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new booking' })\n  @ApiResponse({ status: 201, description: 'Booking successfully created' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  createBooking(@Body() createBookingDto: CreateBookingDto) {\n    return this.bookingService.createBooking(createBookingDto);\n  }\n\n  @Patch(':id/confirm')\n  @ApiOperation({ summary: 'Confirm a booking' })\n  @ApiParam({ name: 'id', description: 'Booking ID' })\n  @ApiResponse({ status: 200, description: 'Booking successfully confirmed' })\n  @ApiResponse({ status: 404, description: 'Booking not found' })\n  confirmBooking(@Param('id') id: string) {\n    return this.bookingService.confirmBooking(id);\n  }\n\n  @Patch(':id/confirm/payment')\n  @ApiOperation({ summary: 'Confirm booking payment' })\n  @ApiParam({ name: 'id', description: 'Booking ID' })\n  @ApiResponse({ status: 200, description: 'Booking payment successfully confirmed' })\n  @ApiResponse({ status: 404, description: 'Booking not found' })\n  confirmBookingPayment(@Param('id') id: string) {\n    return this.bookingService.confirmBookingPayment(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all bookings' })\n  @ApiResponse({ status: 200, description: 'List of all bookings' })\n  getAllBookings() {\n    return this.bookingService.findAll();\n  }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateBookingDto: UpdateBookingDto) {\n  //   return this.bookingService.update(+id, updateBookingDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.bookingService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateArtistDto.html":{"url":"classes/UpdateArtistDto.html","title":"class - UpdateArtistDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateArtistDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/artist/dto/update-artist.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateArtistDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateArtistDto } from './create-artist.dto';\n\nexport class UpdateArtistDto extends PartialType(CreateArtistDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookingDto.html":{"url":"classes/UpdateBookingDto.html","title":"class - UpdateBookingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/booking/dto/update-booking.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateBookingDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateBookingDto } from './create-booking.dto';\n\nexport class UpdateBookingDto extends PartialType(CreateBookingDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/update-event.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateEventDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateEventDto } from './create-event.dto';\n\nexport class UpdateEventDto extends PartialType(CreateEventDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, HydratedDocument } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport enum UserRole {\n  User = 'user',\n  ORGANIZER = 'organizer',\n}\n\n@Schema({ timestamps: true })\nexport class User extends Document {\n  @Prop({\n    required: true,\n  })\n  name: string;\n\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    required: true,\n  })\n  password: string;\n\n  @Prop({\n    type: String,\n    enum: UserRole,\n    default: UserRole.User,\n  })\n  role?: UserRole;\n\n  @Prop({\n    default: Date.now,\n  })\n  createdAt: Date;\n}\n\nexport type UserDocument = HydratedDocument;\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                singleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Login user'})@ApiResponse({status: 200, description: 'User successfully logged in'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register a new user'})@ApiResponse({status: 201, description: 'User successfully registered'})@ApiResponse({status: 400, description: 'Bad request'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        singleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    singleUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get user by ID'})@ApiParam({name: 'id', description: 'User ID'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto, LoginDto, UpdateUserDto } from './dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post('register')\n  @ApiOperation({ summary: 'Register a new user' })\n  @ApiResponse({ status: 201, description: 'User successfully registered' })\n  @ApiResponse({ status: 400, description: 'Bad request' })\n  register(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Post('login')\n  @ApiOperation({ summary: 'Login user' })\n  @ApiResponse({ status: 200, description: 'User successfully logged in' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  login(@Body() loginDto: LoginDto) {\n    return this.usersService.login(loginDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get user by ID' })\n  @ApiParam({ name: 'id', description: 'User ID' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  singleUser(@Param('id') id: string) {\n    return this.usersService.findById(id);\n  }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n  //   return this.usersService.update(+id, updateUserDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.usersService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersModule \n\nUsersModule \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule  -->\n\nUsersModule->UsersModule \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nUsersModule -->\n\nBcryptProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BcryptProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersModule\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\nimport { BcryptProvider } from '../auth/providers/bcrypt.provider';\nimport { Artist, ArtistSchema } from 'src/artist/entities/artist.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, BcryptProvider],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n      {\n        name: Artist.name,\n        schema: ArtistSchema,\n      },\n    ]),\n  ],\n  exports: [UsersModule, UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, artistModel: Model, hashingProvider: BcryptProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        artistModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from './entities/user.entity';\nimport { Model } from 'mongoose';\nimport { LoginDto, CreateUserDto } from './dto';\nimport { BcryptProvider } from 'src/auth/providers/bcrypt.provider';\nimport { Artist } from 'src/artist/entities/artist.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n\n    @InjectModel(Artist.name)\n    private readonly artistModel: Model,\n\n    private readonly hashingProvider: BcryptProvider,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const { email, password } = createUserDto;\n\n    const existingUser = await this.userModel.findOne({ email });\n\n    if (existingUser) {\n      throw new HttpException(\n        'User with email already exists, Try Logging',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword({\n      password,\n    });\n\n    const user = await this.userModel.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n    user.save();\n\n    return await this.userModel.findById(user._id).select('-password');\n  }\n\n  async login(loginDto: LoginDto) {\n    const { email, password } = loginDto;\n\n    const existingUser = await this.findUserByEmail(email);\n\n    if (!existingUser.password) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    let isPasswordCorrect: boolean;\n\n    try {\n      isPasswordCorrect = await this.hashingProvider.comparePasswords({\n        hashedPassword: existingUser.password,\n        password,\n      });\n    } catch (error: any) {\n      throw new RequestTimeoutException(error.message, {\n        cause: error,\n        description: 'Request timeout. Could not compare passwords',\n      });\n    }\n\n    if (!isPasswordCorrect) {\n      throw new HttpException('Invalid credentials', HttpStatus.UNAUTHORIZED);\n    }\n\n    return 'logged in';\n  }\n\n  async findUserByEmail(email: string) {\n    try {\n      const user = await this.userModel.findOne({ email });\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      return user;\n    } catch (error) {\n      throw new RequestTimeoutException(`${error.message}`);\n    }\n  }\n\n  async findById(id: string) {\n    try {\n      const user = await this.userModel.findById(id).select('-password');\n\n      if (!user) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n\n      let artist: Artist;\n\n      try {\n        artist = await this.artistModel.findOne({\n          userId: id,\n        });\n      } catch (error) {\n        throw new HttpException(\n          'Failed to check if user is an artist',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      if (artist) {\n        return { user, artist };\n      } else {\n        return { user };\n      }\n    } catch (error) {\n      throw new RequestTimeoutException(`${error.message}`);\n    }\n  }\n\n  // update(id: number, updateUserDto: UpdateUserDto) {\n  //   return `This action updates a #${id} user`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} user`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/artist/artist.controller.ts\n            \n            controller\n            ArtistController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/artist/artist.service.ts\n            \n            injectable\n            ArtistService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/artist/dto/create-artist.dto.ts\n            \n            class\n            CreateArtistDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/artist/dto/update-artist.dto.ts\n            \n            class\n            UpdateArtistDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/artist/entities/artist.entity.ts\n            \n            class\n            Artist\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/artist/entities/artist.entity.ts\n            \n            variable\n            ArtistSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/artist/entities/artist.entity.ts\n            \n            type alias\n            ArtistDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/access-token/access-token.guard.ts\n            \n            type alias\n            UserPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-token.provider.ts\n            \n            injectable\n            GenerateTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-token.provider.ts\n            \n            injectable\n            RefreshTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/booking/booking.controller.ts\n            \n            controller\n            BookingController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/booking/booking.controller.ts\n            \n            class\n            ToNumberPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/booking/booking.service.ts\n            \n            injectable\n            BookingService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/booking/dto/create-booking.dto.ts\n            \n            class\n            CreateBookingDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/booking/dto/update-booking.dto.ts\n            \n            class\n            UpdateBookingDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/booking/entities/booking.entity.ts\n            \n            class\n            Booking\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/booking/entities/booking.entity.ts\n            \n            variable\n            BookingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/booking/entities/booking.entity.ts\n            \n            type alias\n            BookingDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/events/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/entities/event.entity.ts\n            \n            class\n            Event\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/events/entities/event.entity.ts\n            \n            variable\n            EventSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/events/entities/event.entity.ts\n            \n            type alias\n            EventDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/users/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/entities/user.entity.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.12\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.12\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/mongoose : ^11.0.3\n        \n            @nestjs/platform-express : ^11.0.12\n        \n            @nestjs/swagger : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.0.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BookingPaymentEnum   (src/.../booking.entity.ts)\n                        \n                        \n                            BookingStatusEnum   (src/.../booking.entity.ts)\n                        \n                        \n                            UserRole   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/booking/entities/booking.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        BookingPaymentEnum\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        BookingStatusEnum\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 Confirmed\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 Cancelled\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/users/entities/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ORGANIZER\n                            \n                        \n                        \n                            \n                                Value : organizer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFOBEWORK Backend Task\nA NestJS-based backend application with MongoDB integration, JWT authentication, and Swagger documentation.\nPrerequisites\n\nNode.js >= 18\npnpm >= 8\nMongoDB (local or Atlas instance)\n\nInstallation\n\nClone the repository:\n\nExample :git clone \ncd fobework-backend-task\nInstall dependencies:\n\nExample :pnpm install\nSet up environment variables:\nCopy .env.development.local to .env for local development\nCopy .env.production to .env for production environment\n\n\n\nRequired environment variables:\nExample :MONGODB_URI=your_mongodb_connection_string\nJWT_SECRET=your_jwt_secret\nJWT_TOKEN_AUDIENCE=your_token_audience\nJWT_TOKEN_ISSUER=your_token_issuer\nJWT_ACCESS_TOKEN_TIME_TO_LIVE=3600\nJWT_REFRESH_TOKEN_TIME_TO_LIVE=604800Running the Application\nDevelopment Mode\nExample :pnpm start:devThe application will be available at http://localhost:7231\nProduction Mode\nExample :pnpm build\npnpm start:prodAPI Documentation\nThe API documentation is available through Swagger UI at:\n\nDevelopment: http://localhost:8111/api\nProduction: https://fobework-backend-task.onrender.com/api\n\nAvailable Scripts\n\npnpm start:dev - Start the application in development mode with hot-reload\npnpm build - Build the application\npnpm start:prod - Start the application in production mode\npnpm test - Run unit tests\npnpm test:e2e - Run end-to-end tests\npnpm test:cov - Generate test coverage report\npnpm lint - Lint the codebase\npnpm format - Format the code using Prettier\npnpm doc - Generate API documentation using Compodoc\n\nProject Structure\nExample :src/\n├── auth/           # Authentication module\n├── users/          # Users module\n├── common/         # Common utilities and decorators\n├── config/         # Configuration module\n└── main.ts         # Application entry pointTechnologies Used\n\nNestJS - A progressive Node.js framework\nMongoDB - Database\nMongoose - MongoDB ODM\nJWT - Authentication\nSwagger - API Documentation\nTypeScript - Programming Language\nJest - Testing Framework\n\nContributing\n\nFork the repository\nCreate your feature branch (git checkout -b feature/amazing-feature)\nCommit your changes (git commit -m 'Add some amazing feature')\nPush to the branch (git push origin feature/amazing-feature)\nOpen a Pull Request\n\nLicense\nThis project is licensed under the UNLICENSED License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArtistModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArtistModule\n\n\n\ncluster_ArtistModule_exports\n\n\n\ncluster_ArtistModule_providers\n\n\n\ncluster_BookingModule\n\n\n\ncluster_BookingModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nArtistModule\n\nArtistModule\n\n\n\nBookingModule\n\nBookingModule\n\nBookingModule -->\n\nArtistModule->BookingModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nArtistModule->EventsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArtistModule->AppModule\n\n\n\n\n\nArtistService \n\nArtistService \n\nArtistService  -->\n\nArtistModule->ArtistService \n\n\n\nAppModule -->\n\nBookingModule->AppModule\n\n\n\nBookingModule -->\n\nEventsModule->BookingModule\n\n\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nBookingModule -->\n\nUsersModule->BookingModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersModule \n\nUsersModule \n\nUsersModule  -->\n\nUsersModule->UsersModule \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArtistService\n\nArtistService\n\nArtistModule -->\n\nArtistService->ArtistModule\n\n\n\n\n\nBookingService\n\nBookingService\n\nBookingModule -->\n\nBookingService->BookingModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nUsersModule -->\n\nBcryptProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArtistDocument   (src/.../artist.entity.ts)\n                        \n                        \n                            BookingDocument   (src/.../booking.entity.ts)\n                        \n                        \n                            EventDocument   (src/.../event.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                        \n                            UserPayload   (src/.../access-token.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/artist/entities/artist.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ArtistDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/booking/entities/booking.entity.ts\n    \n    \n        \n            \n                \n                    \n                    BookingDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/events/entities/event.entity.ts\n    \n    \n        \n            \n                \n                    \n                    EventDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/users/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/auth/guards/access-token/access-token.guard.ts\n    \n    \n        \n            \n                \n                    \n                    UserPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArtistSchema   (src/.../artist.entity.ts)\n                        \n                        \n                            BookingSchema   (src/.../booking.entity.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            EventSchema   (src/.../event.entity.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../access-token.guard.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/artist/entities/artist.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArtistSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Artist)\n                    \n                \n\n\n        \n    \n\n    src/booking/entities/booking.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BookingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Booking)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV || 'development'\n                    \n                \n\n\n        \n    \n\n    src/events/entities/event.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EventSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Event)\n                    \n                \n\n\n        \n    \n\n    src/auth/guards/access-token/access-token.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/users/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
